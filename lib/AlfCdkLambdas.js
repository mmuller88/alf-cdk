"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const aws_lambda_1 = require("@aws-cdk/aws-lambda");
const AlfCdkTables_1 = require("./AlfCdkTables");
const aws_logs_1 = require("@aws-cdk/aws-logs");
const aws_iam_1 = require("@aws-cdk/aws-apigateway/node_modules/@aws-cdk/aws-iam");
const CI_USER_TOKEN = process.env.CI_USER_TOKEN || '';
;
class AlfCdkLambdas {
    constructor(scope, props) {
        var _a;
        this.getOneLambda = new aws_lambda_1.Function(scope, 'getOneItemFunction', {
            code: new aws_lambda_1.AssetCode('../src'),
            handler: 'get-one.handler',
            runtime: aws_lambda_1.Runtime.NODEJS_10_X,
            environment: {
                TABLE_NAME: AlfCdkTables_1.instanceTable.name,
                PRIMARY_KEY: AlfCdkTables_1.instanceTable.primaryKey,
                SORT_KEY: AlfCdkTables_1.instanceTable.sortKey
            },
            logRetention: aws_logs_1.RetentionDays.ONE_DAY,
        });
        this.getAllLambda = new aws_lambda_1.Function(scope, 'getAllItemsFunction', {
            code: new aws_lambda_1.AssetCode('../src'),
            handler: 'get-all.handler',
            runtime: aws_lambda_1.Runtime.NODEJS_10_X,
            environment: {
                TABLE_NAME: AlfCdkTables_1.instanceTable.name,
                PRIMARY_KEY: AlfCdkTables_1.instanceTable.primaryKey
            },
            logRetention: aws_logs_1.RetentionDays.ONE_DAY,
        });
        const role = new aws_iam_1.Role(scope, 'Role', {
            assumedBy: new aws_iam_1.ServicePrincipal('lambda.amazonaws.com'),
            managedPolicies: [aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole')],
        });
        role.addToPolicy(new aws_iam_1.PolicyStatement({
            resources: ['*'],
            actions: ['ec2:*', 'logs:*']
        }));
        this.getAllInstancesLambda = new aws_lambda_1.Function(scope, 'getAllInstancesFunction', {
            code: new aws_lambda_1.AssetCode('../src'),
            handler: 'get-all-instances.handler',
            runtime: aws_lambda_1.Runtime.NODEJS_10_X,
            environment: {
                PRIMARY_KEY: AlfCdkTables_1.instanceTable.primaryKey,
                SORT_KEY: AlfCdkTables_1.instanceTable.sortKey,
                STACK_NAME: scope.stackName
            },
            role: role,
            logRetention: aws_logs_1.RetentionDays.ONE_DAY,
        });
        this.deleteOne = new aws_lambda_1.Function(scope, 'deleteItemFunction', {
            code: new aws_lambda_1.AssetCode('../src'),
            handler: 'delete-one.handler',
            runtime: aws_lambda_1.Runtime.NODEJS_10_X,
            environment: {
                TABLE_NAME: AlfCdkTables_1.instanceTable.name,
                PRIMARY_KEY: AlfCdkTables_1.instanceTable.primaryKey,
                SORT_KEY: AlfCdkTables_1.instanceTable.sortKey
            },
            logRetention: aws_logs_1.RetentionDays.ONE_DAY,
        });
        this.putOneItemLambda = new aws_lambda_1.Function(scope, 'putOneItem', {
            code: new aws_lambda_1.AssetCode('../src'),
            handler: 'create.handler',
            runtime: aws_lambda_1.Runtime.NODEJS_10_X,
            environment: {
                TABLE_NAME: AlfCdkTables_1.instanceTable.name,
                PRIMARY_KEY: AlfCdkTables_1.instanceTable.primaryKey,
                SORT_KEY: AlfCdkTables_1.instanceTable.sortKey
            },
            logRetention: aws_logs_1.RetentionDays.ONE_DAY,
        });
        this.createInstanceLambda = new aws_lambda_1.Function(scope, 'createInstance', {
            code: new aws_lambda_1.AssetCode('../src'),
            handler: 'create-instance.handler',
            runtime: aws_lambda_1.Runtime.NODEJS_10_X,
            environment: {
                REPO_TABLE: AlfCdkTables_1.repoTable.name,
                PRIMARY_KEY: AlfCdkTables_1.repoTable.primaryKey,
                CI_USER_TOKEN: CI_USER_TOKEN,
                SECURITY_GROUP: 'default',
                STACK_NAME: scope.stackName,
                IMAGE_ID: ((_a = props) === null || _a === void 0 ? void 0 : _a.imageId) || ''
            },
            role: role,
            logRetention: aws_logs_1.RetentionDays.ONE_DAY,
        });
        this.checkCreationAllowanceLambda = new aws_lambda_1.Function(scope, 'checkCreationAllowanceLambda', {
            code: new aws_lambda_1.AssetCode('../src'),
            handler: 'check-creation-allowance.handler',
            runtime: aws_lambda_1.Runtime.NODEJS_10_X,
            environment: {
                TABLE_NAME: AlfCdkTables_1.instanceTable.name,
                TABLE_STATIC_NAME: AlfCdkTables_1.repoTable.primaryKey,
                PRIMARY_KEY: AlfCdkTables_1.instanceTable.primaryKey,
            },
            logRetention: aws_logs_1.RetentionDays.ONE_DAY,
        });
        this.createOneApi = new aws_lambda_1.Function(scope, 'createItemFunctionApi', {
            code: new aws_lambda_1.AssetCode('src'),
            handler: 'create-api.handler',
            runtime: aws_lambda_1.Runtime.NODEJS_10_X,
            environment: {
                SORT_KEY: AlfCdkTables_1.instanceTable.sortKey
            },
            logRetention: aws_logs_1.RetentionDays.ONE_DAY,
        });
        this.updateOneApi = new aws_lambda_1.Function(scope, 'updateItemFunction', {
            code: new aws_lambda_1.AssetCode('src'),
            handler: 'update-one.handler',
            runtime: aws_lambda_1.Runtime.NODEJS_10_X,
            environment: {
                SORT_KEY: AlfCdkTables_1.instanceTable.sortKey
            },
            logRetention: aws_logs_1.RetentionDays.ONE_DAY,
        });
        new core_1.CfnOutput(scope, 'LGGroupdCreate', {
            value: this.putOneItemLambda.logGroup.logGroupName
        });
        new core_1.CfnOutput(scope, 'LGGroupdCreateInstance', {
            value: this.createInstanceLambda.logGroup.logGroupName
        });
        new core_1.CfnOutput(scope, 'LGGroupdCreateApi', {
            value: this.createOneApi.logGroup.logGroupName
        });
    }
}
exports.AlfCdkLambdas = AlfCdkLambdas;
//# sourceMappingURL=data:application/json;base64,