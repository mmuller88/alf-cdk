{
	"info": {
		"_postman_id": "4e557d97-0cb6-4ac3-b77a-06bc00d50412",
		"name": "alf-cdk",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "items",
			"item": [
				{
					"name": "/items 400 {\"invalid\":\"Body\"}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01e929c8-bf00-4ed4-99e1-908047e318cb",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "max-age=0",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"invalid\" : \"Body\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/items?mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/items 400 Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01e929c8-bf00-4ed4-99e1-908047e318cb",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "max-age=0",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/items?mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/items 400 alfType = -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01e929c8-bf00-4ed4-99e1-908047e318cb",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "max-age=0",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"alfUserId\": \"bald\",\n\t\"alfType\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/items?mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/items 400 alfType = 1000",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01e929c8-bf00-4ed4-99e1-908047e318cb",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "max-age=0",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"alfUserId\": \"bald\",\n\t\"alfType\": 1001\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/items?mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /items userId=bald",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01e929c8-bf00-4ed4-99e1-908047e318cb",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "max-age=0",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"alfUserId\": \"bald\",\n\t\"alfType\": 1,\n\t\"customName\": \"CDK Alf bald\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/items?mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /items userId=nicht",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01e929c8-bf00-4ed4-99e1-908047e318cb",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "max-age=0",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"alfUserId\": \"nicht\",\n\t\"alfType\": 1,\n\t\"customName\": \"CDK Alf nicht\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/items?mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /items userId=nicht",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01e929c8-bf00-4ed4-99e1-908047e318cb",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "max-age=0",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"alfUserId\": \"nicht\",\n\t\"alfType\": 1,\n\t\"customName\": \"CDK Alf nicht\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/items?mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/items mockAuthUser=bald",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba7c44a-d7ca-4c06-bb13-8e8756ca2e5a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"Has 3 items now\", function () {",
									"    pm.expect(data.length).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ba416d93-66cb-41e8-afce-6ce26eba8c02",
								"exec": [
									"setTimeout(function(){}, [5000]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items?mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						},
						"description": "bald is Admin!"
					},
					"response": []
				},
				{
					"name": "/items mockAuthUser=bald alfUserId=nicht",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba7c44a-d7ca-4c06-bb13-8e8756ca2e5a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"Has 3 items now\", function () {",
									"    pm.expect(data.length).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ba416d93-66cb-41e8-afce-6ce26eba8c02",
								"exec": [
									"setTimeout(function(){}, [5000]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items?mockAuthUser=bald&alfUserId=nicht",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "bald"
								},
								{
									"key": "alfUserId",
									"value": "nicht"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/items mockAuthUser=bald alfUserId=bald",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba7c44a-d7ca-4c06-bb13-8e8756ca2e5a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"Has 1 items now\", function () {",
									"    pm.expect(data.length).to.equal(1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ba416d93-66cb-41e8-afce-6ce26eba8c02",
								"exec": [
									"setTimeout(function(){}, [5000]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items?mockAuthUser=bald&alfUserId=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "bald"
								},
								{
									"key": "alfUserId",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/items mockAuthUser=nicht",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba7c44a-d7ca-4c06-bb13-8e8756ca2e5a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"Has 2 items now\", function () {",
									"    pm.expect(data.length).to.equal(2);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ba416d93-66cb-41e8-afce-6ce26eba8c02",
								"exec": [
									"setTimeout(function(){}, [5000]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items?mockAuthUser=nicht",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "nicht"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/items mockAuthUser=nicht alfUserId=bald",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba7c44a-d7ca-4c06-bb13-8e8756ca2e5a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"Has 2 items now\", function () {",
									"    pm.expect(data.length).to.equal(2);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ba416d93-66cb-41e8-afce-6ce26eba8c02",
								"exec": [
									"setTimeout(function(){}, [5000]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items?mockAuthUser=nicht&alfUserId=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "nicht"
								},
								{
									"key": "alfUserId",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/items mockAuthUser=nicht alfUserId=balder",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba7c44a-d7ca-4c06-bb13-8e8756ca2e5a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"Has 2 items now\", function () {",
									"    pm.expect(data.length).to.equal(2);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ba416d93-66cb-41e8-afce-6ce26eba8c02",
								"exec": [
									"setTimeout(function(){}, [5000]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items?mockAuthUser=nicht&alfUserId=balder",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "nicht"
								},
								{
									"key": "alfUserId",
									"value": "balder"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /items alfUserId=bald",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba7c44a-d7ca-4c06-bb13-8e8756ca2e5a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"Has 1 item now\", function () {",
									"    pm.expect(data.length).to.equal(1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ba416d93-66cb-41e8-afce-6ce26eba8c02",
								"exec": [
									"setTimeout(function(){}, [5000]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items?alfUserId=bald&mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "alfUserId",
									"value": "bald"
								},
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /items alfUserId=nicht",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba7c44a-d7ca-4c06-bb13-8e8756ca2e5a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"Has 2 item now\", function () {",
									"    pm.expect(data.length).to.equal(2);",
									"});",
									"",
									"pm.globals.set(\"id\", data[0].alfInstanceId);",
									"pm.globals.set(\"alfUserId\", data[0].alfUserId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ba416d93-66cb-41e8-afce-6ce26eba8c02",
								"exec": [
									"setTimeout(function(){}, [5000]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items?alfUserId=nicht&mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "alfUserId",
									"value": "nicht"
								},
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /items userId=nicht",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba7c44a-d7ca-4c06-bb13-8e8756ca2e5a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"Has 3 items now\", function () {",
									"    pm.expect(data.length).to.equal(3);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ba416d93-66cb-41e8-afce-6ce26eba8c02",
								"exec": [
									"setTimeout(function(){}, [5000]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items?userId=nicht&mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "userId",
									"value": "nicht"
								},
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/items length=3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01e929c8-bf00-4ed4-99e1-908047e318cb",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"alfUserId\": \"nicht\",\n\t\"alfType\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/items?mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba7c44a-d7ca-4c06-bb13-8e8756ca2e5a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"Has 3 items now\", function () {",
									"    pm.expect(data.length).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ba416d93-66cb-41e8-afce-6ce26eba8c02",
								"exec": [
									"setTimeout(function(){}, [10000]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/instances?mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"instances"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/instances without sleep",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba7c44a-d7ca-4c06-bb13-8e8756ca2e5a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"Has 3 items now\", function () {",
									"    pm.expect(data.length).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ba416d93-66cb-41e8-afce-6ce26eba8c02",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/instances?mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"instances"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/instances alfUserId=nicht",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba7c44a-d7ca-4c06-bb13-8e8756ca2e5a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"Has 2 item now\", function () {",
									"    pm.expect(data.length).to.equal(2);",
									"});",
									"",
									"pm.globals.set(\"url\", data[0].url);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ba416d93-66cb-41e8-afce-6ce26eba8c02",
								"exec": [
									"setTimeout(function(){}, [5000]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/instances?alfUserId=nicht&mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"instances"
							],
							"query": [
								{
									"key": "alfUserId",
									"value": "nicht"
								},
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /items/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7483f0e7-3f82-4e14-9c6c-ab7391442f89",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items/{{id}}?mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"{{id}}"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/items/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7483f0e7-3f82-4e14-9c6c-ab7391442f89",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items/{{id}}?alfUserId={{alfUserId}}&mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"{{id}}"
							],
							"query": [
								{
									"key": "alfUserId",
									"value": "{{alfUserId}}"
								},
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/items/:id missing alfUserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dd9557e-a7d6-4909-a059-322366663068",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"alfType\": 2,\n    \"expectedStatus\": \"terminated\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/items/{{id}}?mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"{{id}}"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/items/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dd9557e-a7d6-4909-a059-322366663068",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"alfUserId\": \"{{alfUserId}}\",\n    \"alfType\": 2,\n    \"expectedStatus\": \"terminated\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/items/{{id}}?mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"{{id}}"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET after PUT /items/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7483f0e7-3f82-4e14-9c6c-ab7391442f89",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"expectedStatus to be terminated\", function () {",
									"    pm.expect(data.expectedStatus).to.eql(\"terminated\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "52da3f06-30f8-4873-b51f-9bbf87de8ac4",
								"exec": [
									"setTimeout(function(){}, [10000]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items/{{id}}?alfUserId={{alfUserId}}&mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"{{id}}"
							],
							"query": [
								{
									"key": "alfUserId",
									"value": "{{alfUserId}}"
								},
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/instances alfUserId=bald",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba7c44a-d7ca-4c06-bb13-8e8756ca2e5a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.globals.set(\"url\", data[0].url);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ba416d93-66cb-41e8-afce-6ce26eba8c02",
								"exec": [
									"setTimeout(function(){}, [5000]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/instances?alfUserId=bald&mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"instances"
							],
							"query": [
								{
									"key": "alfUserId",
									"value": "bald"
								},
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba7c44a-d7ca-4c06-bb13-8e8756ca2e5a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.globals.set(\"id\", data[0].alfInstanceId);",
									"pm.globals.set(\"alfUserId\", data[0].alfUserId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e9ab842c-b151-4fa7-9601-bc2cd1834db7",
								"exec": [
									"setTimeout(function(){}, [5000]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items?mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/items/:id without alfUserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dd9557e-a7d6-4909-a059-322366663068",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items/{{id}}?mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"{{id}}"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/items/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dd9557e-a7d6-4909-a059-322366663068",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items/{{id}}?alfUserId={{alfUserId}}&mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"{{id}}"
							],
							"query": [
								{
									"key": "alfUserId",
									"value": "{{alfUserId}}"
								},
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba7c44a-d7ca-4c06-bb13-8e8756ca2e5a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.globals.set(\"id\", data[0].alfInstanceId);",
									"pm.globals.set(\"alfUserId\", data[0].alfUserId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e9ab842c-b151-4fa7-9601-bc2cd1834db7",
								"exec": [
									"setTimeout(function(){}, [5000]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items?mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/items/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dd9557e-a7d6-4909-a059-322366663068",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items/{{id}}?alfUserId={{alfUserId}}&mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"{{id}}"
							],
							"query": [
								{
									"key": "alfUserId",
									"value": "{{alfUserId}}"
								},
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba7c44a-d7ca-4c06-bb13-8e8756ca2e5a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.globals.set(\"id\", data[0].alfInstanceId);",
									"pm.globals.set(\"alfUserId\", data[0].alfUserId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e9ab842c-b151-4fa7-9601-bc2cd1834db7",
								"exec": [
									"setTimeout(function(){}, [5000]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items?mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/items/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dd9557e-a7d6-4909-a059-322366663068",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items/{{id}}?alfUserId={{alfUserId}}&mockAuthUser=bald",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"{{id}}"
							],
							"query": [
								{
									"key": "alfUserId",
									"value": "{{alfUserId}}"
								},
								{
									"key": "mockAuthUser",
									"value": "bald"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "7b81b2e7-e8de-4a34-927b-57736fd1c9b1",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "75ecddd3-d689-4e83-ba01-359d139029a3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "a47ba5a6-716c-47ee-acbf-74e544e2c993",
			"key": "baseUrl",
			"value": "https://r873rfpaua.execute-api.eu-west-2.amazonaws.com/prod",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}