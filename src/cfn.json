Resources:
  VPCB9E5F0B4:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: InstanceStack/VPC
    Metadata:
      aws:cdk:path: InstanceStack/VPC/Resource
  VPCingressSubnet1SubnetBB7FDF67:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone: eu-west-2a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: InstanceStack/VPC/ingressSubnet1
        - Key: aws-cdk:subnet-name
          Value: ingress
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: InstanceStack/VPC/ingressSubnet1/Subnet
  VPCingressSubnet1RouteTableEEF02A64:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: InstanceStack/VPC/ingressSubnet1
    Metadata:
      aws:cdk:path: InstanceStack/VPC/ingressSubnet1/RouteTable
  VPCingressSubnet1RouteTableAssociation7700457B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCingressSubnet1RouteTableEEF02A64
      SubnetId:
        Ref: VPCingressSubnet1SubnetBB7FDF67
    Metadata:
      aws:cdk:path: InstanceStack/VPC/ingressSubnet1/RouteTableAssociation
  VPCingressSubnet1DefaultRouteC1C9D77C:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCingressSubnet1RouteTableEEF02A64
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: InstanceStack/VPC/ingressSubnet1/DefaultRoute
  VPCingressSubnet2SubnetE30F0091:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone: eu-west-2b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: InstanceStack/VPC/ingressSubnet2
        - Key: aws-cdk:subnet-name
          Value: ingress
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: InstanceStack/VPC/ingressSubnet2/Subnet
  VPCingressSubnet2RouteTable8565F2D0:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: InstanceStack/VPC/ingressSubnet2
    Metadata:
      aws:cdk:path: InstanceStack/VPC/ingressSubnet2/RouteTable
  VPCingressSubnet2RouteTableAssociation35C35494:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCingressSubnet2RouteTable8565F2D0
      SubnetId:
        Ref: VPCingressSubnet2SubnetE30F0091
    Metadata:
      aws:cdk:path: InstanceStack/VPC/ingressSubnet2/RouteTableAssociation
  VPCingressSubnet2DefaultRoute8E2F45A7:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCingressSubnet2RouteTable8565F2D0
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: InstanceStack/VPC/ingressSubnet2/DefaultRoute
  VPCingressSubnet3Subnet38A3BA95:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone: eu-west-2c
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: InstanceStack/VPC/ingressSubnet3
        - Key: aws-cdk:subnet-name
          Value: ingress
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: InstanceStack/VPC/ingressSubnet3/Subnet
  VPCingressSubnet3RouteTable83539693:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: InstanceStack/VPC/ingressSubnet3
    Metadata:
      aws:cdk:path: InstanceStack/VPC/ingressSubnet3/RouteTable
  VPCingressSubnet3RouteTableAssociation421877E8:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCingressSubnet3RouteTable83539693
      SubnetId:
        Ref: VPCingressSubnet3Subnet38A3BA95
    Metadata:
      aws:cdk:path: InstanceStack/VPC/ingressSubnet3/RouteTableAssociation
  VPCingressSubnet3DefaultRouteDF537F13:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCingressSubnet3RouteTable83539693
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: InstanceStack/VPC/ingressSubnet3/DefaultRoute
  VPCIGWB7E252D3:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InstanceStack/VPC
    Metadata:
      aws:cdk:path: InstanceStack/VPC/IGW
  VPCVPCGW99B986DC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      InternetGatewayId:
        Ref: VPCIGWB7E252D3
    Metadata:
      aws:cdk:path: InstanceStack/VPC/VPCGW
  alfSecurityGroup43222B26:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: InstanceStack/alfSecurityGroup
      GroupName: secg-12ab
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:22
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: InstanceStack/alfSecurityGroup/Resource
  alfInstanceInstanceRole9DC58747:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: InstanceStack/alfInstance
    Metadata:
      aws:cdk:path: InstanceStack/alfInstance/InstanceRole/Resource
  alfInstanceInstanceProfile5A664A27:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: alfInstanceInstanceRole9DC58747
    Metadata:
      aws:cdk:path: InstanceStack/alfInstance/InstanceProfile
  alfInstance0197DD97:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: eu-west-2a
      IamInstanceProfile:
        Ref: alfInstanceInstanceProfile5A664A27
      ImageId:
        Ref: SsmParameterValueawsserviceamiamazonlinuxlatestamznamihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t2.large
      KeyName: ec2dev
      SecurityGroupIds:
        - Fn::GetAtt:
            - alfSecurityGroup43222B26
            - GroupId
      SubnetId:
        Ref: VPCingressSubnet1SubnetBB7FDF67
      Tags:
        - Key: Name
          Value: InstanceStack/alfInstance
      UserData:
        Fn::Base64: "Content-Type: multipart/mixed; boundary=\"//\"

          MIME-Version: 1.0


          --//

          Content-Type: text/cloud-config; charset=\"us-ascii\"

          MIME-Version: 1.0

          Content-Transfer-Encoding: 7bit

          Content-Disposition: attachment; filename=\"cloud-config.txt\"


          #cloud-config

          cloud_final_modules:

          - [scripts-user, always]


          --//

          Content-Type: text/x-shellscript; charset=\"us-ascii\"

          MIME-Version: 1.0

          Content-Transfer-Encoding: 7bit

          Content-Disposition: attachment; filename=\"userdata.txt\"


          #!/bin/bash

          echo \"sudo halt\" | at now + 55 minutes

          yum -y install git

          REPO=alf-ec2-1

          git clone https://mmuller88:@github.com/mmuller88/$REPO /usr/local/$REPO

          cd /usr/local/$REPO

          chmod +x init.sh && ./init.sh

          sudo chmod +x start.sh && ./start.sh

          --//

          \  "
    DependsOn:
      - alfInstanceInstanceRole9DC58747
    Metadata:
      aws:cdk:path: InstanceStack/alfInstance/Resource
  LB8A12904C:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - LBSecurityGroup8A41EA2B
            - GroupId
      Subnets:
        - Ref: VPCingressSubnet1SubnetBB7FDF67
        - Ref: VPCingressSubnet2SubnetE30F0091
        - Ref: VPCingressSubnet3Subnet38A3BA95
      Type: application
    DependsOn:
      - VPCingressSubnet1DefaultRouteC1C9D77C
      - VPCingressSubnet2DefaultRoute8E2F45A7
      - VPCingressSubnet3DefaultRouteDF537F13
    Metadata:
      aws:cdk:path: InstanceStack/LB/Resource
  LBSecurityGroup8A41EA2B:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB InstanceStackLBE4F5D450
      SecurityGroupEgress:
        - CidrIp: 255.255.255.255/32
          Description: Disallow all traffic
          FromPort: 252
          IpProtocol: icmp
          ToPort: 86
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: InstanceStack/LB/SecurityGroup/Resource
  LBListener49E825B4:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: LBListenerTargetGroupF04FCF6D
          Type: forward
      LoadBalancerArn:
        Ref: LB8A12904C
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: InstanceStack/LB/Listener/Resource
  LBListenerTargetGroupF04FCF6D:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      Targets:
        - Id:
            Ref: alfInstance0197DD97
      TargetType: instance
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: InstanceStack/LB/Listener/TargetGroup/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=1.38.0,@aws-cdk/aws-cloudwatch=1.38.0,@aws-cdk/aws-ec2=1.38.0,@aws-cdk/aws-elasticloadbalancingv2=1.38.0,@aws-cdk/aws-events=1.38.0,@aws-cdk/aws-iam=1.38.0,@aws-cdk/aws-kms=1.38.0,@aws-cdk/aws-logs=1.38.0,@aws-cdk/aws-route53=1.38.0,@aws-cdk/aws-route53-targets=1.38.0,@aws-cdk/aws-s3=1.38.0,@aws-cdk/aws-ssm=1.38.0,@aws-cdk/cloud-assembly-schema=1.38.0,@aws-cdk/core=1.38.0,@aws-cdk/cx-api=1.38.0,@aws-cdk/region-info=1.38.0,jsii-runtime=node.js/v14.2.0
Parameters:
  SsmParameterValueawsserviceamiamazonlinuxlatestamznamihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2
Outputs:
  InstancePublicDnsName:
    Value:
      Fn::GetAtt:
        - alfInstance0197DD97
        - PublicDnsName
  LoadBalancerDnsName:
    Value:
      Fn::GetAtt:
        - LB8A12904C
        - DNSName

