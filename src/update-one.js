"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const db = new AWS.DynamoDB.DocumentClient();
const TABLE_NAME = process.env.TABLE_NAME || '';
const PRIMARY_KEY = process.env.PRIMARY_KEY || '';
const RESERVED_RESPONSE = `Error: You're using AWS reserved keywords as attributes`, DYNAMODB_EXECUTION_ERROR = `Error: Execution update, caused a Dynamodb error, please take a look at your CloudWatch Logs.`;
exports.handler = async (event = {}) => {
    if (!event.body) {
        return { statusCode: 400, body: 'invalid request, you are missing the parameter body' };
    }
    const editedItemId = event.pathParameters.id;
    if (!editedItemId) {
        return { statusCode: 400, body: 'invalid request, you are missing the path parameter id' };
    }
    const editedItem = typeof event.body == 'object' ? event.body : JSON.parse(event.body);
    const editedItemProperties = Object.keys(editedItem);
    if (!editedItem || editedItemProperties.length < 1) {
        return { statusCode: 400, body: 'invalid request, no arguments provided' };
    }
    const firstProperty = editedItemProperties.splice(0, 1);
    const params = {
        TableName: TABLE_NAME,
        Key: {
            [PRIMARY_KEY]: editedItemId,
        },
        UpdateExpression: `set ${firstProperty} = :${firstProperty}`,
        ExpressionAttributeValues: {},
        ReturnValues: 'UPDATED_NEW',
    };
    params.ExpressionAttributeValues[`:${firstProperty}`] = editedItem[`${firstProperty}`];
    editedItemProperties.forEach((property) => {
        params.UpdateExpression += `, ${property} = :${property}`;
        params.ExpressionAttributeValues[`:${property}`] = editedItem[property];
    });
    try {
        await db.update(params).promise();
        return { statusCode: 204, body: '' };
    }
    catch (dbError) {
        const errorResponse = dbError.code === 'ValidationException' && dbError.message.includes('reserved keyword')
            ? DYNAMODB_EXECUTION_ERROR
            : RESERVED_RESPONSE;
        return { statusCode: 500, body: errorResponse };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLW9uZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVwZGF0ZS1vbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0IsTUFBTSxFQUFFLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQzdDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQztBQUNoRCxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7QUFFbEQsTUFBTSxpQkFBaUIsR0FBRyx5REFBeUQsRUFDakYsd0JBQXdCLEdBQUcsK0ZBQStGLENBQUM7QUFFaEgsUUFBQSxPQUFPLEdBQUcsS0FBSyxFQUFFLFFBQWEsRUFBRSxFQUFnQixFQUFFO0lBQzdELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO1FBQ2YsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLHFEQUFxRCxFQUFFLENBQUM7S0FDekY7SUFFRCxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztJQUM3QyxJQUFJLENBQUMsWUFBWSxFQUFFO1FBQ2pCLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSx3REFBd0QsRUFBRSxDQUFDO0tBQzVGO0lBRUQsTUFBTSxVQUFVLEdBQVEsT0FBTyxLQUFLLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUYsTUFBTSxvQkFBb0IsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3JELElBQUksQ0FBQyxVQUFVLElBQUksb0JBQW9CLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsd0NBQXdDLEVBQUUsQ0FBQztLQUM1RTtJQUVELE1BQU0sYUFBYSxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDeEQsTUFBTSxNQUFNLEdBQVE7UUFDbEIsU0FBUyxFQUFFLFVBQVU7UUFDckIsR0FBRyxFQUFFO1lBQ0gsQ0FBQyxXQUFXLENBQUMsRUFBRSxZQUFZO1NBQzVCO1FBQ0QsZ0JBQWdCLEVBQUUsT0FBTyxhQUFhLE9BQU8sYUFBYSxFQUFFO1FBQzVELHlCQUF5QixFQUFFLEVBQUU7UUFDN0IsWUFBWSxFQUFFLGFBQWE7S0FDNUIsQ0FBQztJQUNGLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLGFBQWEsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLEdBQUcsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUV2RixvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtRQUN4QyxNQUFNLENBQUMsZ0JBQWdCLElBQUksS0FBSyxRQUFRLE9BQU8sUUFBUSxFQUFFLENBQUM7UUFDMUQsTUFBTSxDQUFDLHlCQUF5QixDQUFDLElBQUksUUFBUSxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUUsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJO1FBQ0YsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2xDLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztLQUN0QztJQUFDLE9BQU8sT0FBTyxFQUFFO1FBQ2hCLE1BQU0sYUFBYSxHQUNqQixPQUFPLENBQUMsSUFBSSxLQUFLLHFCQUFxQixJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDO1lBQ3BGLENBQUMsQ0FBQyx3QkFBd0I7WUFDMUIsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO1FBQ3hCLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsQ0FBQztLQUNqRDtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKTtcbmNvbnN0IGRiID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuY29uc3QgVEFCTEVfTkFNRSA9IHByb2Nlc3MuZW52LlRBQkxFX05BTUUgfHwgJyc7XG5jb25zdCBQUklNQVJZX0tFWSA9IHByb2Nlc3MuZW52LlBSSU1BUllfS0VZIHx8ICcnO1xuXG5jb25zdCBSRVNFUlZFRF9SRVNQT05TRSA9IGBFcnJvcjogWW91J3JlIHVzaW5nIEFXUyByZXNlcnZlZCBrZXl3b3JkcyBhcyBhdHRyaWJ1dGVzYCxcbiAgRFlOQU1PREJfRVhFQ1VUSU9OX0VSUk9SID0gYEVycm9yOiBFeGVjdXRpb24gdXBkYXRlLCBjYXVzZWQgYSBEeW5hbW9kYiBlcnJvciwgcGxlYXNlIHRha2UgYSBsb29rIGF0IHlvdXIgQ2xvdWRXYXRjaCBMb2dzLmA7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBhbnkgPSB7fSk6IFByb21pc2U8YW55PiA9PiB7XG4gIGlmICghZXZlbnQuYm9keSkge1xuICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDQwMCwgYm9keTogJ2ludmFsaWQgcmVxdWVzdCwgeW91IGFyZSBtaXNzaW5nIHRoZSBwYXJhbWV0ZXIgYm9keScgfTtcbiAgfVxuXG4gIGNvbnN0IGVkaXRlZEl0ZW1JZCA9IGV2ZW50LnBhdGhQYXJhbWV0ZXJzLmlkO1xuICBpZiAoIWVkaXRlZEl0ZW1JZCkge1xuICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDQwMCwgYm9keTogJ2ludmFsaWQgcmVxdWVzdCwgeW91IGFyZSBtaXNzaW5nIHRoZSBwYXRoIHBhcmFtZXRlciBpZCcgfTtcbiAgfVxuXG4gIGNvbnN0IGVkaXRlZEl0ZW06IGFueSA9IHR5cGVvZiBldmVudC5ib2R5ID09ICdvYmplY3QnID8gZXZlbnQuYm9keSA6IEpTT04ucGFyc2UoZXZlbnQuYm9keSk7XG4gIGNvbnN0IGVkaXRlZEl0ZW1Qcm9wZXJ0aWVzID0gT2JqZWN0LmtleXMoZWRpdGVkSXRlbSk7XG4gIGlmICghZWRpdGVkSXRlbSB8fCBlZGl0ZWRJdGVtUHJvcGVydGllcy5sZW5ndGggPCAxKSB7XG4gICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogNDAwLCBib2R5OiAnaW52YWxpZCByZXF1ZXN0LCBubyBhcmd1bWVudHMgcHJvdmlkZWQnIH07XG4gIH1cblxuICBjb25zdCBmaXJzdFByb3BlcnR5ID0gZWRpdGVkSXRlbVByb3BlcnRpZXMuc3BsaWNlKDAsIDEpO1xuICBjb25zdCBwYXJhbXM6IGFueSA9IHtcbiAgICBUYWJsZU5hbWU6IFRBQkxFX05BTUUsXG4gICAgS2V5OiB7XG4gICAgICBbUFJJTUFSWV9LRVldOiBlZGl0ZWRJdGVtSWQsXG4gICAgfSxcbiAgICBVcGRhdGVFeHByZXNzaW9uOiBgc2V0ICR7Zmlyc3RQcm9wZXJ0eX0gPSA6JHtmaXJzdFByb3BlcnR5fWAsXG4gICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczoge30sXG4gICAgUmV0dXJuVmFsdWVzOiAnVVBEQVRFRF9ORVcnLFxuICB9O1xuICBwYXJhbXMuRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1tgOiR7Zmlyc3RQcm9wZXJ0eX1gXSA9IGVkaXRlZEl0ZW1bYCR7Zmlyc3RQcm9wZXJ0eX1gXTtcblxuICBlZGl0ZWRJdGVtUHJvcGVydGllcy5mb3JFYWNoKChwcm9wZXJ0eSkgPT4ge1xuICAgIHBhcmFtcy5VcGRhdGVFeHByZXNzaW9uICs9IGAsICR7cHJvcGVydHl9ID0gOiR7cHJvcGVydHl9YDtcbiAgICBwYXJhbXMuRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1tgOiR7cHJvcGVydHl9YF0gPSBlZGl0ZWRJdGVtW3Byb3BlcnR5XTtcbiAgfSk7XG5cbiAgdHJ5IHtcbiAgICBhd2FpdCBkYi51cGRhdGUocGFyYW1zKS5wcm9taXNlKCk7XG4gICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogMjA0LCBib2R5OiAnJyB9O1xuICB9IGNhdGNoIChkYkVycm9yKSB7XG4gICAgY29uc3QgZXJyb3JSZXNwb25zZSA9XG4gICAgICBkYkVycm9yLmNvZGUgPT09ICdWYWxpZGF0aW9uRXhjZXB0aW9uJyAmJiBkYkVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ3Jlc2VydmVkIGtleXdvcmQnKVxuICAgICAgICA/IERZTkFNT0RCX0VYRUNVVElPTl9FUlJPUlxuICAgICAgICA6IFJFU0VSVkVEX1JFU1BPTlNFO1xuICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDUwMCwgYm9keTogZXJyb3JSZXNwb25zZSB9O1xuICB9XG59O1xuIl19