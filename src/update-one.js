"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_1 = require("aws-sdk");
const AWS = require('aws-sdk');
const stepFunctions = new AWS.StepFunctions();
const STATE_MACHINE_ARN = process.env.STATE_MACHINE_ARN || '';
// Promised based version https://stackoverflow.com/questions/49244134/starting-a-stepfunction-and-exiting-doesnt-trigger-execution
const clients = {
    stepFunctions: new aws_sdk_1.StepFunctions()
};
const createExecutor = ({ clients }) => async (event) => {
    console.log('Executing media pipeline job ' + JSON.stringify(event, null, 2));
    console.log('Executing media pipeline job ' + JSON.stringify(clients, null, 2));
    var item = typeof event.body === 'object' ? event.body : JSON.parse(event.body);
    const params = {
        stateMachineArn: STATE_MACHINE_ARN,
        input: JSON.stringify(item)
    };
    await stepFunctions.startExecution(params).promise();
    return item;
};
const startExecution = createExecutor({ clients });
exports.handler = async (event = {}) => {
    // Pass in the event from the Lambda e.g S3 Put, SQS Message
    const item = await startExecution(event);
    return { statusCode: 200, body: JSON.stringify(item), isBase64Encoded: false };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLW9uZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVwZGF0ZS1vbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBd0M7QUFDeEMsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLE1BQU0sYUFBYSxHQUFHLElBQUksR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBRTlDLE1BQU0saUJBQWlCLEdBQVcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsSUFBSSxFQUFFLENBQUE7QUFFckUsbUlBQW1JO0FBRW5JLE1BQU0sT0FBTyxHQUFHO0lBQ2QsYUFBYSxFQUFFLElBQUksdUJBQWEsRUFBRTtDQUNuQyxDQUFBO0FBRUQsTUFBTSxjQUFjLEdBQUcsQ0FBQyxFQUFFLE9BQU8sRUFBTSxFQUFFLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBVSxFQUFFLEVBQUU7SUFDL0QsT0FBTyxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUcsQ0FBQztJQUNoRixPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUErQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBRyxDQUFDO0lBQ2xGLElBQUksSUFBSSxHQUFRLE9BQU8sS0FBSyxDQUFDLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JGLE1BQU0sTUFBTSxHQUFHO1FBQ2IsZUFBZSxFQUFFLGlCQUFpQjtRQUNsQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7S0FDNUIsQ0FBQztJQUNGLE1BQU0sYUFBYSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNyRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVGLE1BQU0sY0FBYyxHQUFHLGNBQWMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFFdEMsUUFBQSxPQUFPLEdBQUcsS0FBSyxFQUFFLFFBQWEsRUFBRSxFQUFnQixFQUFFO0lBRTdELDREQUE0RDtJQUM1RCxNQUFNLElBQUksR0FBRyxNQUFNLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUV6QyxPQUFPLEVBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFDLENBQUM7QUFDL0UsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RlcEZ1bmN0aW9ucyB9IGZyb20gJ2F3cy1zZGsnO1xuY29uc3QgQVdTID0gcmVxdWlyZSgnYXdzLXNkaycpO1xuY29uc3Qgc3RlcEZ1bmN0aW9ucyA9IG5ldyBBV1MuU3RlcEZ1bmN0aW9ucygpO1xuXG5jb25zdCBTVEFURV9NQUNISU5FX0FSTjogc3RyaW5nID0gcHJvY2Vzcy5lbnYuU1RBVEVfTUFDSElORV9BUk4gfHwgJydcblxuLy8gUHJvbWlzZWQgYmFzZWQgdmVyc2lvbiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80OTI0NDEzNC9zdGFydGluZy1hLXN0ZXBmdW5jdGlvbi1hbmQtZXhpdGluZy1kb2VzbnQtdHJpZ2dlci1leGVjdXRpb25cblxuY29uc3QgY2xpZW50cyA9IHtcbiAgc3RlcEZ1bmN0aW9uczogbmV3IFN0ZXBGdW5jdGlvbnMoKVxufVxuXG5jb25zdCBjcmVhdGVFeGVjdXRvciA9ICh7IGNsaWVudHMgfTphbnkpID0+IGFzeW5jIChldmVudDogYW55KSA9PiB7XG4gIGNvbnNvbGUubG9nKCdFeGVjdXRpbmcgbWVkaWEgcGlwZWxpbmUgam9iICcgKyBKU09OLnN0cmluZ2lmeShldmVudCwgbnVsbCwgMikgICk7XG4gIGNvbnNvbGUubG9nKCdFeGVjdXRpbmcgbWVkaWEgcGlwZWxpbmUgam9iICcgKyBKU09OLnN0cmluZ2lmeShjbGllbnRzLCBudWxsLCAyKSAgKTtcbiAgdmFyIGl0ZW06IGFueSA9IHR5cGVvZiBldmVudC5ib2R5ID09PSAnb2JqZWN0JyA/IGV2ZW50LmJvZHkgOiBKU09OLnBhcnNlKGV2ZW50LmJvZHkpO1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgc3RhdGVNYWNoaW5lQXJuOiBTVEFURV9NQUNISU5FX0FSTixcbiAgICBpbnB1dDogSlNPTi5zdHJpbmdpZnkoaXRlbSlcbiAgfTtcbiAgYXdhaXQgc3RlcEZ1bmN0aW9ucy5zdGFydEV4ZWN1dGlvbihwYXJhbXMpLnByb21pc2UoKTtcbiAgcmV0dXJuIGl0ZW07XG59O1xuXG5jb25zdCBzdGFydEV4ZWN1dGlvbiA9IGNyZWF0ZUV4ZWN1dG9yKHsgY2xpZW50cyB9KTtcblxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IGFueSA9IHt9KTogUHJvbWlzZTxhbnk+ID0+IHtcblxuICAvLyBQYXNzIGluIHRoZSBldmVudCBmcm9tIHRoZSBMYW1iZGEgZS5nIFMzIFB1dCwgU1FTIE1lc3NhZ2VcbiAgY29uc3QgaXRlbSA9IGF3YWl0IHN0YXJ0RXhlY3V0aW9uKGV2ZW50KTtcblxuICByZXR1cm4ge3N0YXR1c0NvZGU6IDIwMCwgYm9keTogSlNPTi5zdHJpbmdpZnkoaXRlbSksIGlzQmFzZTY0RW5jb2RlZDogZmFsc2V9O1xufVxuIl19