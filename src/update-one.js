"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_1 = require("aws-sdk");
const AWS = require('aws-sdk');
const stepFunctions = new AWS.StepFunctions();
const SORT_KEY = process.env.SORT_KEY || '';
const STATE_MACHINE_ARN = process.env.STATE_MACHINE_ARN || '';
// Promised based version https://stackoverflow.com/questions/49244134/starting-a-stepfunction-and-exiting-doesnt-trigger-execution
const clients = {
    stepFunctions: new aws_sdk_1.StepFunctions()
};
const createExecutor = ({ clients }) => async (event) => {
    console.log('Executing media pipeline job ' + JSON.stringify(event, null, 2));
    console.log('Executing media pipeline job ' + JSON.stringify(clients, null, 2));
    var item = typeof event.body === 'object' ? event.body : JSON.parse(event.body);
    console.debug("update-one event: " + JSON.stringify(event));
    item[SORT_KEY] = event.pathParameters[SORT_KEY];
    const params = {
        stateMachineArn: STATE_MACHINE_ARN,
        input: JSON.stringify({ item: item })
    };
    await stepFunctions.startExecution(params).promise();
    return item;
};
const startExecution = createExecutor({ clients });
exports.handler = async (event = {}) => {
    // Pass in the event from the Lambda e.g S3 Put, SQS Message
    await startExecution(event);
    return { statusCode: 200, body: JSON.stringify({}), isBase64Encoded: false };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLW9uZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVwZGF0ZS1vbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBd0M7QUFDeEMsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLE1BQU0sYUFBYSxHQUFHLElBQUksR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQzlDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQztBQUU1QyxNQUFNLGlCQUFpQixHQUFXLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLElBQUksRUFBRSxDQUFBO0FBRXJFLG1JQUFtSTtBQUVuSSxNQUFNLE9BQU8sR0FBRztJQUNkLGFBQWEsRUFBRSxJQUFJLHVCQUFhLEVBQUU7Q0FDbkMsQ0FBQTtBQUVELE1BQU0sY0FBYyxHQUFHLENBQUMsRUFBRSxPQUFPLEVBQU0sRUFBRSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQVUsRUFBRSxFQUFFO0lBQy9ELE9BQU8sQ0FBQyxHQUFHLENBQUMsK0JBQStCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFHLENBQUM7SUFDaEYsT0FBTyxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUcsQ0FBQztJQUNsRixJQUFJLElBQUksR0FBUSxPQUFPLEtBQUssQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVyRixPQUFPLENBQUMsS0FBSyxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUU1RCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVoRCxNQUFNLE1BQU0sR0FBRztRQUNiLGVBQWUsRUFBRSxpQkFBaUI7UUFDbEMsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFDLENBQUM7S0FDcEMsQ0FBQztJQUNGLE1BQU0sYUFBYSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNyRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVGLE1BQU0sY0FBYyxHQUFHLGNBQWMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFFdEMsUUFBQSxPQUFPLEdBQUcsS0FBSyxFQUFFLFFBQWEsRUFBRSxFQUFnQixFQUFFO0lBRTdELDREQUE0RDtJQUM1RCxNQUFNLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUU1QixPQUFPLEVBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFDLENBQUM7QUFDN0UsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RlcEZ1bmN0aW9ucyB9IGZyb20gJ2F3cy1zZGsnO1xuY29uc3QgQVdTID0gcmVxdWlyZSgnYXdzLXNkaycpO1xuY29uc3Qgc3RlcEZ1bmN0aW9ucyA9IG5ldyBBV1MuU3RlcEZ1bmN0aW9ucygpO1xuY29uc3QgU09SVF9LRVkgPSBwcm9jZXNzLmVudi5TT1JUX0tFWSB8fCAnJztcblxuY29uc3QgU1RBVEVfTUFDSElORV9BUk46IHN0cmluZyA9IHByb2Nlc3MuZW52LlNUQVRFX01BQ0hJTkVfQVJOIHx8ICcnXG5cbi8vIFByb21pc2VkIGJhc2VkIHZlcnNpb24gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDkyNDQxMzQvc3RhcnRpbmctYS1zdGVwZnVuY3Rpb24tYW5kLWV4aXRpbmctZG9lc250LXRyaWdnZXItZXhlY3V0aW9uXG5cbmNvbnN0IGNsaWVudHMgPSB7XG4gIHN0ZXBGdW5jdGlvbnM6IG5ldyBTdGVwRnVuY3Rpb25zKClcbn1cblxuY29uc3QgY3JlYXRlRXhlY3V0b3IgPSAoeyBjbGllbnRzIH06YW55KSA9PiBhc3luYyAoZXZlbnQ6IGFueSkgPT4ge1xuICBjb25zb2xlLmxvZygnRXhlY3V0aW5nIG1lZGlhIHBpcGVsaW5lIGpvYiAnICsgSlNPTi5zdHJpbmdpZnkoZXZlbnQsIG51bGwsIDIpICApO1xuICBjb25zb2xlLmxvZygnRXhlY3V0aW5nIG1lZGlhIHBpcGVsaW5lIGpvYiAnICsgSlNPTi5zdHJpbmdpZnkoY2xpZW50cywgbnVsbCwgMikgICk7XG4gIHZhciBpdGVtOiBhbnkgPSB0eXBlb2YgZXZlbnQuYm9keSA9PT0gJ29iamVjdCcgPyBldmVudC5ib2R5IDogSlNPTi5wYXJzZShldmVudC5ib2R5KTtcblxuICBjb25zb2xlLmRlYnVnKFwidXBkYXRlLW9uZSBldmVudDogXCIgKyBKU09OLnN0cmluZ2lmeShldmVudCkpO1xuXG4gIGl0ZW1bU09SVF9LRVldID0gZXZlbnQucGF0aFBhcmFtZXRlcnNbU09SVF9LRVldO1xuXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBzdGF0ZU1hY2hpbmVBcm46IFNUQVRFX01BQ0hJTkVfQVJOLFxuICAgIGlucHV0OiBKU09OLnN0cmluZ2lmeSh7aXRlbTogaXRlbX0pXG4gIH07XG4gIGF3YWl0IHN0ZXBGdW5jdGlvbnMuc3RhcnRFeGVjdXRpb24ocGFyYW1zKS5wcm9taXNlKCk7XG4gIHJldHVybiBpdGVtO1xufTtcblxuY29uc3Qgc3RhcnRFeGVjdXRpb24gPSBjcmVhdGVFeGVjdXRvcih7IGNsaWVudHMgfSk7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBhbnkgPSB7fSk6IFByb21pc2U8YW55PiA9PiB7XG5cbiAgLy8gUGFzcyBpbiB0aGUgZXZlbnQgZnJvbSB0aGUgTGFtYmRhIGUuZyBTMyBQdXQsIFNRUyBNZXNzYWdlXG4gIGF3YWl0IHN0YXJ0RXhlY3V0aW9uKGV2ZW50KTtcblxuICByZXR1cm4ge3N0YXR1c0NvZGU6IDIwMCwgYm9keTogSlNPTi5zdHJpbmdpZnkoe30pLCBpc0Jhc2U2NEVuY29kZWQ6IGZhbHNlfTtcbn1cbiJdfQ==