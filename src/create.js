"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const db = new AWS.DynamoDB.DocumentClient();
const { v4: uuidv4 } = require('uuid');
const TABLE_NAME = process.env.TABLE_NAME || '';
const PRIMARY_KEY = process.env.PRIMARY_KEY || '';
const SORT_KEY = process.env.SORT_KEY || '';
const RESERVED_RESPONSE = `Error: You're using AWS reserved keywords as attributes`, DYNAMODB_EXECUTION_ERROR = `Error: Execution update, caused a Dynamodb error, please take a look at your CloudWatch Logs.`;
exports.handler = async (data = {}) => {
    console.debug('insert item request: ' + JSON.stringify(data));
    // var item: any = typeof data.item === 'object' ? data.item : JSON.parse(data.item);
    var item = JSON.parse(data);
    // item[PRIMARY_KEY] = uuidv4();
    item[PRIMARY_KEY] = data[PRIMARY_KEY];
    item[SORT_KEY] = uuidv4();
    const params = {
        TableName: TABLE_NAME,
        Item: item
    };
    try {
        console.debug('params: ' + JSON.stringify(params));
        await db.put(params).promise();
        return { statusCode: 201, body: '' };
    }
    catch (dbError) {
        const errorResponse = dbError.code === 'ValidationException' && dbError.message.includes('reserved keyword')
            ? DYNAMODB_EXECUTION_ERROR
            : RESERVED_RESPONSE;
        return { statusCode: 500, body: errorResponse };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3JlYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLE1BQU0sRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUM3QyxNQUFNLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN2QyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUM7QUFDaEQsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO0FBQ2xELE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQztBQUU1QyxNQUFNLGlCQUFpQixHQUFHLHlEQUF5RCxFQUNqRix3QkFBd0IsR0FBRywrRkFBK0YsQ0FBQztBQUVoSCxRQUFBLE9BQU8sR0FBRyxLQUFLLEVBQUUsT0FBWSxFQUFFLEVBQWdCLEVBQUU7SUFDNUQsT0FBTyxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFOUQscUZBQXFGO0lBQ3JGLElBQUksSUFBSSxHQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFakMsZ0NBQWdDO0lBQ2hDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDO0lBQzFCLE1BQU0sTUFBTSxHQUFHO1FBQ2IsU0FBUyxFQUFFLFVBQVU7UUFDckIsSUFBSSxFQUFFLElBQUk7S0FDWCxDQUFDO0lBRUYsSUFBSTtRQUNGLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNuRCxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDL0IsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDO0tBQ3RDO0lBQUMsT0FBTyxPQUFPLEVBQUU7UUFDaEIsTUFBTSxhQUFhLEdBQ2pCLE9BQU8sQ0FBQyxJQUFJLEtBQUsscUJBQXFCLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUM7WUFDcEYsQ0FBQyxDQUFDLHdCQUF3QjtZQUMxQixDQUFDLENBQUMsaUJBQWlCLENBQUM7UUFDeEIsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxDQUFDO0tBQ2pEO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQVdTID0gcmVxdWlyZSgnYXdzLXNkaycpO1xuY29uc3QgZGIgPSBuZXcgQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50KCk7XG5jb25zdCB7IHY0OiB1dWlkdjQgfSA9IHJlcXVpcmUoJ3V1aWQnKTtcbmNvbnN0IFRBQkxFX05BTUUgPSBwcm9jZXNzLmVudi5UQUJMRV9OQU1FIHx8ICcnO1xuY29uc3QgUFJJTUFSWV9LRVkgPSBwcm9jZXNzLmVudi5QUklNQVJZX0tFWSB8fCAnJztcbmNvbnN0IFNPUlRfS0VZID0gcHJvY2Vzcy5lbnYuU09SVF9LRVkgfHwgJyc7XG5cbmNvbnN0IFJFU0VSVkVEX1JFU1BPTlNFID0gYEVycm9yOiBZb3UncmUgdXNpbmcgQVdTIHJlc2VydmVkIGtleXdvcmRzIGFzIGF0dHJpYnV0ZXNgLFxuICBEWU5BTU9EQl9FWEVDVVRJT05fRVJST1IgPSBgRXJyb3I6IEV4ZWN1dGlvbiB1cGRhdGUsIGNhdXNlZCBhIER5bmFtb2RiIGVycm9yLCBwbGVhc2UgdGFrZSBhIGxvb2sgYXQgeW91ciBDbG91ZFdhdGNoIExvZ3MuYDtcblxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZGF0YTogYW55ID0ge30pOiBQcm9taXNlPGFueT4gPT4ge1xuICBjb25zb2xlLmRlYnVnKCdpbnNlcnQgaXRlbSByZXF1ZXN0OiAnICsgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuXG4gIC8vIHZhciBpdGVtOiBhbnkgPSB0eXBlb2YgZGF0YS5pdGVtID09PSAnb2JqZWN0JyA/IGRhdGEuaXRlbSA6IEpTT04ucGFyc2UoZGF0YS5pdGVtKTtcbiAgdmFyIGl0ZW06IGFueSA9IEpTT04ucGFyc2UoZGF0YSk7XG5cbiAgLy8gaXRlbVtQUklNQVJZX0tFWV0gPSB1dWlkdjQoKTtcbiAgaXRlbVtQUklNQVJZX0tFWV0gPSBkYXRhW1BSSU1BUllfS0VZXTtcbiAgaXRlbVtTT1JUX0tFWV0gPSB1dWlkdjQoKTtcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIFRhYmxlTmFtZTogVEFCTEVfTkFNRSxcbiAgICBJdGVtOiBpdGVtXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zb2xlLmRlYnVnKCdwYXJhbXM6ICcgKyBKU09OLnN0cmluZ2lmeShwYXJhbXMpKTtcbiAgICBhd2FpdCBkYi5wdXQocGFyYW1zKS5wcm9taXNlKCk7XG4gICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogMjAxLCBib2R5OiAnJyB9O1xuICB9IGNhdGNoIChkYkVycm9yKSB7XG4gICAgY29uc3QgZXJyb3JSZXNwb25zZSA9XG4gICAgICBkYkVycm9yLmNvZGUgPT09ICdWYWxpZGF0aW9uRXhjZXB0aW9uJyAmJiBkYkVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ3Jlc2VydmVkIGtleXdvcmQnKVxuICAgICAgICA/IERZTkFNT0RCX0VYRUNVVElPTl9FUlJPUlxuICAgICAgICA6IFJFU0VSVkVEX1JFU1BPTlNFO1xuICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDUwMCwgYm9keTogZXJyb3JSZXNwb25zZSB9O1xuICB9XG59O1xuIl19