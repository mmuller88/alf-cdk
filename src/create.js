"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const db = new AWS.DynamoDB.DocumentClient();
// const { v4 : uuidv4 } = require('uuid');
const TABLE_NAME = process.env.TABLE_NAME || '';
// const PRIMARY_KEY = process.env.PRIMARY_KEY || '';
// const SORT_KEY = process.env.SORT_KEY || '';
const RESERVED_RESPONSE = `Error: You're using AWS reserved keywords as attributes`, DYNAMODB_EXECUTION_ERROR = `Error: Execution update, caused a Dynamodb error, please take a look at your CloudWatch Logs.`;
exports.handler = async (data = {}) => {
    console.debug('insert item request: ' + JSON.stringify(data));
    // var item: any = typeof data.item === 'object' ? data.item : JSON.parse(data.item);
    var item = typeof data === 'object' ? data : JSON.parse(data);
    // item[PRIMARY_KEY] = uuidv4();
    // item[PRIMARY_KEY] = item[PRIMARY_KEY];
    // item[SORT_KEY] = uuidv4();
    const params = {
        TableName: TABLE_NAME,
        Item: item
    };
    try {
        console.debug('params: ' + JSON.stringify(params));
        await db.put(params).promise();
        return { statusCode: 201, body: '' };
    }
    catch (dbError) {
        const errorResponse = dbError.code === 'ValidationException' && dbError.message.includes('reserved keyword')
            ? DYNAMODB_EXECUTION_ERROR
            : RESERVED_RESPONSE;
        return { statusCode: 500, body: errorResponse };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3JlYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLE1BQU0sRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUM3QywyQ0FBMkM7QUFDM0MsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO0FBQ2hELHFEQUFxRDtBQUNyRCwrQ0FBK0M7QUFFL0MsTUFBTSxpQkFBaUIsR0FBRyx5REFBeUQsRUFDakYsd0JBQXdCLEdBQUcsK0ZBQStGLENBQUM7QUFFaEgsUUFBQSxPQUFPLEdBQUcsS0FBSyxFQUFFLE9BQVksRUFBRSxFQUFnQixFQUFFO0lBQzVELE9BQU8sQ0FBQyxLQUFLLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRTlELHFGQUFxRjtJQUNyRixJQUFJLElBQUksR0FBUSxPQUFPLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVuRSxnQ0FBZ0M7SUFDaEMseUNBQXlDO0lBQ3pDLDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBRztRQUNiLFNBQVMsRUFBRSxVQUFVO1FBQ3JCLElBQUksRUFBRSxJQUFJO0tBQ1gsQ0FBQztJQUVGLElBQUk7UUFDRixPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDbkQsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQy9CLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztLQUN0QztJQUFDLE9BQU8sT0FBTyxFQUFFO1FBQ2hCLE1BQU0sYUFBYSxHQUNqQixPQUFPLENBQUMsSUFBSSxLQUFLLHFCQUFxQixJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDO1lBQ3BGLENBQUMsQ0FBQyx3QkFBd0I7WUFDMUIsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO1FBQ3hCLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsQ0FBQztLQUNqRDtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKTtcbmNvbnN0IGRiID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuLy8gY29uc3QgeyB2NCA6IHV1aWR2NCB9ID0gcmVxdWlyZSgndXVpZCcpO1xuY29uc3QgVEFCTEVfTkFNRSA9IHByb2Nlc3MuZW52LlRBQkxFX05BTUUgfHwgJyc7XG4vLyBjb25zdCBQUklNQVJZX0tFWSA9IHByb2Nlc3MuZW52LlBSSU1BUllfS0VZIHx8ICcnO1xuLy8gY29uc3QgU09SVF9LRVkgPSBwcm9jZXNzLmVudi5TT1JUX0tFWSB8fCAnJztcblxuY29uc3QgUkVTRVJWRURfUkVTUE9OU0UgPSBgRXJyb3I6IFlvdSdyZSB1c2luZyBBV1MgcmVzZXJ2ZWQga2V5d29yZHMgYXMgYXR0cmlidXRlc2AsXG4gIERZTkFNT0RCX0VYRUNVVElPTl9FUlJPUiA9IGBFcnJvcjogRXhlY3V0aW9uIHVwZGF0ZSwgY2F1c2VkIGEgRHluYW1vZGIgZXJyb3IsIHBsZWFzZSB0YWtlIGEgbG9vayBhdCB5b3VyIENsb3VkV2F0Y2ggTG9ncy5gO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChkYXRhOiBhbnkgPSB7fSk6IFByb21pc2U8YW55PiA9PiB7XG4gIGNvbnNvbGUuZGVidWcoJ2luc2VydCBpdGVtIHJlcXVlc3Q6ICcgKyBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG5cbiAgLy8gdmFyIGl0ZW06IGFueSA9IHR5cGVvZiBkYXRhLml0ZW0gPT09ICdvYmplY3QnID8gZGF0YS5pdGVtIDogSlNPTi5wYXJzZShkYXRhLml0ZW0pO1xuICB2YXIgaXRlbTogYW55ID0gdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnID8gZGF0YSA6IEpTT04ucGFyc2UoZGF0YSk7XG5cbiAgLy8gaXRlbVtQUklNQVJZX0tFWV0gPSB1dWlkdjQoKTtcbiAgLy8gaXRlbVtQUklNQVJZX0tFWV0gPSBpdGVtW1BSSU1BUllfS0VZXTtcbiAgLy8gaXRlbVtTT1JUX0tFWV0gPSB1dWlkdjQoKTtcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIFRhYmxlTmFtZTogVEFCTEVfTkFNRSxcbiAgICBJdGVtOiBpdGVtXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zb2xlLmRlYnVnKCdwYXJhbXM6ICcgKyBKU09OLnN0cmluZ2lmeShwYXJhbXMpKTtcbiAgICBhd2FpdCBkYi5wdXQocGFyYW1zKS5wcm9taXNlKCk7XG4gICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogMjAxLCBib2R5OiAnJyB9O1xuICB9IGNhdGNoIChkYkVycm9yKSB7XG4gICAgY29uc3QgZXJyb3JSZXNwb25zZSA9XG4gICAgICBkYkVycm9yLmNvZGUgPT09ICdWYWxpZGF0aW9uRXhjZXB0aW9uJyAmJiBkYkVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ3Jlc2VydmVkIGtleXdvcmQnKVxuICAgICAgICA/IERZTkFNT0RCX0VYRUNVVElPTl9FUlJPUlxuICAgICAgICA6IFJFU0VSVkVEX1JFU1BPTlNFO1xuICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDUwMCwgYm9keTogZXJyb3JSZXNwb25zZSB9O1xuICB9XG59O1xuIl19