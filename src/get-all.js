"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_1 = require("aws-sdk");
const statics_1 = require("./statics");
// const TABLE_NAME = process.env.TABLE_NAME || '';
// const PRIMARY_KEY = process.env.PRIMARY_KEY || '';
const MOCK_AUTH_USERNAME = process.env.MOCK_AUTH_USERNAME || '';
// const ADMIN_TABLE_NAME = process.env.ADMIN_TABLE_NAME || '';
const db = new aws_sdk_1.DynamoDB.DocumentClient();
const headers = {
    'Access-Control-Allow-Origin': '*'
};
exports.handler = async (event = {}) => {
    console.debug("get-all event: " + JSON.stringify(event));
    const queryStringParameters = event.queryStringParameters;
    const userName = MOCK_AUTH_USERNAME ? queryStringParameters && queryStringParameters['mockAuthUser'] ? queryStringParameters['mockAuthUser'] : MOCK_AUTH_USERNAME : 'boing';
    console.debug("userName: " + userName);
    if (!userName) {
        return { statusCode: 401, body: { message: 'Authentication issue: no credentials found' }, headers: headers };
    }
    const adminTableParams = {
        TableName: statics_1.adminTable.name,
        Key: {
            [statics_1.adminTable.primaryKey]: userName,
        },
    };
    console.debug("adminTableParams: " + JSON.stringify(adminTableParams));
    const resp = await db.get(adminTableParams).promise();
    const isAdmin = resp.Item ? true : false;
    console.debug(`User: ${userName} Admin: ${isAdmin}`);
    try {
        var response;
        if (isAdmin) {
            if (queryStringParameters && queryStringParameters[statics_1.instanceTable.primaryKey]) {
                response = await db.query({
                    TableName: statics_1.instanceTable.name,
                    KeyConditionExpression: `#${statics_1.instanceTable.primaryKey} = :${statics_1.instanceTable.primaryKey}`,
                    ExpressionAttributeNames: { '#alfUserId': `${statics_1.instanceTable.primaryKey}` },
                    ExpressionAttributeValues: { ':alfUserId': queryStringParameters[statics_1.instanceTable.primaryKey] }
                }).promise();
            }
            else {
                response = await db.scan({
                    TableName: statics_1.instanceTable.name,
                }).promise();
            }
        }
        else {
            response = await db.query({
                TableName: statics_1.instanceTable.name,
                KeyConditionExpression: `#${statics_1.instanceTable.primaryKey} = :${statics_1.instanceTable.primaryKey}`,
                ExpressionAttributeNames: { '#alfUserId': `${statics_1.instanceTable.primaryKey}` },
                ExpressionAttributeValues: { ':alfUserId': userName }
            }).promise();
        }
        return { statusCode: 200, body: JSON.stringify(response.Items), headers: headers };
    }
    catch (dbError) {
        return { statusCode: 500, body: JSON.stringify(dbError), headers: headers };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWFsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdldC1hbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBbUM7QUFDbkMsdUNBQXNEO0FBQ3RELG1EQUFtRDtBQUNuRCxxREFBcUQ7QUFDckQsTUFBTSxrQkFBa0IsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixJQUFJLEVBQUUsQ0FBQztBQUNoRSwrREFBK0Q7QUFFL0QsTUFBTSxFQUFFLEdBQUcsSUFBSSxrQkFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBRXpDLE1BQU0sT0FBTyxHQUFHO0lBQ2QsNkJBQTZCLEVBQUUsR0FBRztDQUNuQyxDQUFBO0FBRVksUUFBQSxPQUFPLEdBQUcsS0FBSyxFQUFFLFFBQWEsRUFBRSxFQUFnQixFQUFFO0lBQzdELE9BQU8sQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBRXpELE1BQU0scUJBQXFCLEdBQUcsS0FBSyxDQUFDLHFCQUFxQixDQUFDO0lBRTFELE1BQU0sUUFBUSxHQUFHLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxxQkFBcUIsSUFBSSxxQkFBcUIsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFDNUssT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLENBQUM7SUFDdkMsSUFBRyxDQUFDLFFBQVEsRUFBQztRQUNYLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFDLE9BQU8sRUFBRSw0Q0FBNEMsRUFBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQztLQUM3RztJQUNELE1BQU0sZ0JBQWdCLEdBQUc7UUFDdkIsU0FBUyxFQUFFLG9CQUFVLENBQUMsSUFBSTtRQUMxQixHQUFHLEVBQUU7WUFDSCxDQUFDLG9CQUFVLENBQUMsVUFBVSxDQUFDLEVBQUUsUUFBUTtTQUNsQztLQUNGLENBQUM7SUFFRixPQUFPLENBQUMsS0FBSyxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLE1BQU0sSUFBSSxHQUFHLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3RELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQSxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3ZDLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxRQUFRLFdBQVcsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUVyRCxJQUFJO1FBQ0YsSUFBSSxRQUFRLENBQUM7UUFDYixJQUFHLE9BQU8sRUFBQztZQUNULElBQUcscUJBQXFCLElBQUkscUJBQXFCLENBQUMsdUJBQWEsQ0FBQyxVQUFVLENBQUMsRUFBQztnQkFDMUUsUUFBUSxHQUFHLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQztvQkFDeEIsU0FBUyxFQUFFLHVCQUFhLENBQUMsSUFBSTtvQkFDN0Isc0JBQXNCLEVBQUUsSUFBSSx1QkFBYSxDQUFDLFVBQVUsT0FBTyx1QkFBYSxDQUFDLFVBQVUsRUFBRTtvQkFDckYsd0JBQXdCLEVBQUUsRUFBQyxZQUFZLEVBQUUsR0FBRyx1QkFBYSxDQUFDLFVBQVUsRUFBRSxFQUFDO29CQUN2RSx5QkFBeUIsRUFBRSxFQUFFLFlBQVksRUFBRSxxQkFBcUIsQ0FBQyx1QkFBYSxDQUFDLFVBQVUsQ0FBQyxFQUFFO2lCQUM3RixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7YUFFZDtpQkFBTTtnQkFDTCxRQUFRLEdBQUcsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDO29CQUNyQixTQUFTLEVBQUUsdUJBQWEsQ0FBQyxJQUFJO2lCQUM5QixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDZjtTQUNIO2FBQU07WUFDTCxRQUFRLEdBQUcsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDO2dCQUN4QixTQUFTLEVBQUUsdUJBQWEsQ0FBQyxJQUFJO2dCQUM3QixzQkFBc0IsRUFBRSxJQUFJLHVCQUFhLENBQUMsVUFBVSxPQUFPLHVCQUFhLENBQUMsVUFBVSxFQUFFO2dCQUNyRix3QkFBd0IsRUFBRSxFQUFDLFlBQVksRUFBRSxHQUFHLHVCQUFhLENBQUMsVUFBVSxFQUFFLEVBQUM7Z0JBQ3ZFLHlCQUF5QixFQUFFLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRTthQUN0RCxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDZDtRQUdELE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFDLENBQUM7S0FDbkY7SUFBQyxPQUFPLE9BQU8sRUFBRTtRQUNoQixPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUM7S0FDN0U7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbW9EQiB9IGZyb20gJ2F3cy1zZGsnO1xuaW1wb3J0IHsgaW5zdGFuY2VUYWJsZSwgYWRtaW5UYWJsZSB9IGZyb20gJy4vc3RhdGljcyc7XG4vLyBjb25zdCBUQUJMRV9OQU1FID0gcHJvY2Vzcy5lbnYuVEFCTEVfTkFNRSB8fCAnJztcbi8vIGNvbnN0IFBSSU1BUllfS0VZID0gcHJvY2Vzcy5lbnYuUFJJTUFSWV9LRVkgfHwgJyc7XG5jb25zdCBNT0NLX0FVVEhfVVNFUk5BTUUgPSBwcm9jZXNzLmVudi5NT0NLX0FVVEhfVVNFUk5BTUUgfHwgJyc7XG4vLyBjb25zdCBBRE1JTl9UQUJMRV9OQU1FID0gcHJvY2Vzcy5lbnYuQURNSU5fVEFCTEVfTkFNRSB8fCAnJztcblxuY29uc3QgZGIgPSBuZXcgRHluYW1vREIuRG9jdW1lbnRDbGllbnQoKTtcblxuY29uc3QgaGVhZGVycyA9IHtcbiAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6ICcqJ1xufVxuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudDogYW55ID0ge30pOiBQcm9taXNlPGFueT4gPT4ge1xuICBjb25zb2xlLmRlYnVnKFwiZ2V0LWFsbCBldmVudDogXCIgKyBKU09OLnN0cmluZ2lmeShldmVudCkpO1xuXG4gIGNvbnN0IHF1ZXJ5U3RyaW5nUGFyYW1ldGVycyA9IGV2ZW50LnF1ZXJ5U3RyaW5nUGFyYW1ldGVycztcblxuICBjb25zdCB1c2VyTmFtZSA9IE1PQ0tfQVVUSF9VU0VSTkFNRSA/IHF1ZXJ5U3RyaW5nUGFyYW1ldGVycyAmJiBxdWVyeVN0cmluZ1BhcmFtZXRlcnNbJ21vY2tBdXRoVXNlciddID8gcXVlcnlTdHJpbmdQYXJhbWV0ZXJzWydtb2NrQXV0aFVzZXInXSA6IE1PQ0tfQVVUSF9VU0VSTkFNRSA6ICdib2luZyc7XG4gIGNvbnNvbGUuZGVidWcoXCJ1c2VyTmFtZTogXCIgKyB1c2VyTmFtZSk7XG4gIGlmKCF1c2VyTmFtZSl7XG4gICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogNDAxLCBib2R5OiB7bWVzc2FnZTogJ0F1dGhlbnRpY2F0aW9uIGlzc3VlOiBubyBjcmVkZW50aWFscyBmb3VuZCd9LCBoZWFkZXJzOiBoZWFkZXJzIH07XG4gIH1cbiAgY29uc3QgYWRtaW5UYWJsZVBhcmFtcyA9IHtcbiAgICBUYWJsZU5hbWU6IGFkbWluVGFibGUubmFtZSxcbiAgICBLZXk6IHtcbiAgICAgIFthZG1pblRhYmxlLnByaW1hcnlLZXldOiB1c2VyTmFtZSxcbiAgICB9LFxuICB9O1xuXG4gIGNvbnNvbGUuZGVidWcoXCJhZG1pblRhYmxlUGFyYW1zOiBcIiArIEpTT04uc3RyaW5naWZ5KGFkbWluVGFibGVQYXJhbXMpKTtcbiAgY29uc3QgcmVzcCA9IGF3YWl0IGRiLmdldChhZG1pblRhYmxlUGFyYW1zKS5wcm9taXNlKCk7XG4gIGNvbnN0IGlzQWRtaW4gPSByZXNwLkl0ZW0/IHRydWU6IGZhbHNlO1xuICBjb25zb2xlLmRlYnVnKGBVc2VyOiAke3VzZXJOYW1lfSBBZG1pbjogJHtpc0FkbWlufWApO1xuXG4gIHRyeSB7XG4gICAgdmFyIHJlc3BvbnNlO1xuICAgIGlmKGlzQWRtaW4pe1xuICAgICAgaWYocXVlcnlTdHJpbmdQYXJhbWV0ZXJzICYmIHF1ZXJ5U3RyaW5nUGFyYW1ldGVyc1tpbnN0YW5jZVRhYmxlLnByaW1hcnlLZXldKXtcbiAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBkYi5xdWVyeSh7XG4gICAgICAgICAgVGFibGVOYW1lOiBpbnN0YW5jZVRhYmxlLm5hbWUsXG4gICAgICAgICAgS2V5Q29uZGl0aW9uRXhwcmVzc2lvbjogYCMke2luc3RhbmNlVGFibGUucHJpbWFyeUtleX0gPSA6JHtpbnN0YW5jZVRhYmxlLnByaW1hcnlLZXl9YCxcbiAgICAgICAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IHsnI2FsZlVzZXJJZCc6IGAke2luc3RhbmNlVGFibGUucHJpbWFyeUtleX1gfSxcbiAgICAgICAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7ICc6YWxmVXNlcklkJzogcXVlcnlTdHJpbmdQYXJhbWV0ZXJzW2luc3RhbmNlVGFibGUucHJpbWFyeUtleV0gfVxuICAgICAgICB9KS5wcm9taXNlKCk7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3BvbnNlID0gYXdhaXQgZGIuc2Nhbih7XG4gICAgICAgICAgICBUYWJsZU5hbWU6IGluc3RhbmNlVGFibGUubmFtZSxcbiAgICAgICAgICB9KS5wcm9taXNlKCk7XG4gICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXNwb25zZSA9IGF3YWl0IGRiLnF1ZXJ5KHtcbiAgICAgICAgVGFibGVOYW1lOiBpbnN0YW5jZVRhYmxlLm5hbWUsXG4gICAgICAgIEtleUNvbmRpdGlvbkV4cHJlc3Npb246IGAjJHtpbnN0YW5jZVRhYmxlLnByaW1hcnlLZXl9ID0gOiR7aW5zdGFuY2VUYWJsZS5wcmltYXJ5S2V5fWAsXG4gICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczogeycjYWxmVXNlcklkJzogYCR7aW5zdGFuY2VUYWJsZS5wcmltYXJ5S2V5fWB9LFxuICAgICAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7ICc6YWxmVXNlcklkJzogdXNlck5hbWUgfVxuICAgICAgfSkucHJvbWlzZSgpO1xuICAgIH1cblxuXG4gICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogMjAwLCBib2R5OiBKU09OLnN0cmluZ2lmeShyZXNwb25zZS5JdGVtcyksIGhlYWRlcnM6IGhlYWRlcnN9O1xuICB9IGNhdGNoIChkYkVycm9yKSB7XG4gICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogNTAwLCBib2R5OiBKU09OLnN0cmluZ2lmeShkYkVycm9yKSwgaGVhZGVyczogaGVhZGVycyB9O1xuICB9XG59O1xuIl19