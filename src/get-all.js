"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_1 = require("aws-sdk");
const statics_1 = require("./statics");
// const TABLE_NAME = process.env.TABLE_NAME || '';
// const PRIMARY_KEY = process.env.PRIMARY_KEY || '';
// const MOCK_AUTH_USERNAME = process.env.MOCK_AUTH_USERNAME || 'false';
// const ADMIN_TABLE_NAME = process.env.ADMIN_TABLE_NAME || '';
const db = new aws_sdk_1.DynamoDB.DocumentClient();
const headers = {
    'Access-Control-Allow-Origin': '*'
};
exports.handler = async (event = {}) => {
    console.debug("get-all event: " + JSON.stringify(event));
    const queryStringParameters = event.queryStringParameters;
    // const userName = MOCK_AUTH_USERNAME === 'false' ? 'boing' : queryStringParameters['mockedUserId'];
    // const params = {
    //   TableName: ADMIN_TABLE_NAME,
    //   Key: {
    //     [PRIMARY_KEY]: item[PRIMARY_KEY],
    //   },
    // };
    // console.debug("params: " + JSON.stringify(params));
    // const response = await db.get(params).promise();
    // const isAdmin =
    try {
        var response;
        if (queryStringParameters && queryStringParameters[statics_1.instanceTable.primaryKey]) {
            response = await db.query({
                TableName: statics_1.instanceTable.name,
                KeyConditionExpression: '#alfUserId = :alfUserId',
                ExpressionAttributeNames: { '#alfUserId': 'alfUserId' },
                ExpressionAttributeValues: { ':alfUserId': queryStringParameters[statics_1.instanceTable.primaryKey] }
            }).promise();
        }
        else {
            response = await db.scan({
                TableName: statics_1.instanceTable.primaryKey,
            }).promise();
        }
        return { statusCode: 200, body: JSON.stringify(response.Items), headers: headers };
    }
    catch (dbError) {
        return { statusCode: 500, body: JSON.stringify(dbError), headers: headers };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWFsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdldC1hbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBbUM7QUFDbkMsdUNBQTBDO0FBQzFDLG1EQUFtRDtBQUNuRCxxREFBcUQ7QUFDckQsd0VBQXdFO0FBQ3hFLCtEQUErRDtBQUUvRCxNQUFNLEVBQUUsR0FBRyxJQUFJLGtCQUFRLENBQUMsY0FBYyxFQUFFLENBQUM7QUFFekMsTUFBTSxPQUFPLEdBQUc7SUFDZCw2QkFBNkIsRUFBRSxHQUFHO0NBQ25DLENBQUE7QUFFWSxRQUFBLE9BQU8sR0FBRyxLQUFLLEVBQUUsUUFBYSxFQUFFLEVBQWdCLEVBQUU7SUFDN0QsT0FBTyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFFekQsTUFBTSxxQkFBcUIsR0FBRyxLQUFLLENBQUMscUJBQXFCLENBQUM7SUFFMUQscUdBQXFHO0lBQ3JHLG1CQUFtQjtJQUNuQixpQ0FBaUM7SUFDakMsV0FBVztJQUNYLHdDQUF3QztJQUN4QyxPQUFPO0lBQ1AsS0FBSztJQUVMLHNEQUFzRDtJQUN0RCxtREFBbUQ7SUFDbkQsa0JBQWtCO0lBRWxCLElBQUk7UUFDRixJQUFJLFFBQVEsQ0FBQztRQUNiLElBQUcscUJBQXFCLElBQUkscUJBQXFCLENBQUMsdUJBQWEsQ0FBQyxVQUFVLENBQUMsRUFBQztZQUMxRSxRQUFRLEdBQUcsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDO2dCQUN4QixTQUFTLEVBQUUsdUJBQWEsQ0FBQyxJQUFJO2dCQUM3QixzQkFBc0IsRUFBRSx5QkFBeUI7Z0JBQ2pELHdCQUF3QixFQUFFLEVBQUMsWUFBWSxFQUFFLFdBQVcsRUFBQztnQkFDckQseUJBQXlCLEVBQUUsRUFBRSxZQUFZLEVBQUUscUJBQXFCLENBQUMsdUJBQWEsQ0FBQyxVQUFVLENBQUMsRUFBRTthQUM3RixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7U0FFZDthQUFNO1lBQ0wsUUFBUSxHQUFHLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQztnQkFDckIsU0FBUyxFQUFFLHVCQUFhLENBQUMsVUFBVTthQUNwQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDZjtRQUVGLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFDLENBQUM7S0FDbkY7SUFBQyxPQUFPLE9BQU8sRUFBRTtRQUNoQixPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUM7S0FDN0U7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbW9EQiB9IGZyb20gJ2F3cy1zZGsnO1xuaW1wb3J0IHsgaW5zdGFuY2VUYWJsZSB9IGZyb20gJy4vc3RhdGljcyc7XG4vLyBjb25zdCBUQUJMRV9OQU1FID0gcHJvY2Vzcy5lbnYuVEFCTEVfTkFNRSB8fCAnJztcbi8vIGNvbnN0IFBSSU1BUllfS0VZID0gcHJvY2Vzcy5lbnYuUFJJTUFSWV9LRVkgfHwgJyc7XG4vLyBjb25zdCBNT0NLX0FVVEhfVVNFUk5BTUUgPSBwcm9jZXNzLmVudi5NT0NLX0FVVEhfVVNFUk5BTUUgfHwgJ2ZhbHNlJztcbi8vIGNvbnN0IEFETUlOX1RBQkxFX05BTUUgPSBwcm9jZXNzLmVudi5BRE1JTl9UQUJMRV9OQU1FIHx8ICcnO1xuXG5jb25zdCBkYiA9IG5ldyBEeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuXG5jb25zdCBoZWFkZXJzID0ge1xuICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJzogJyonXG59XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBhbnkgPSB7fSk6IFByb21pc2U8YW55PiA9PiB7XG4gIGNvbnNvbGUuZGVidWcoXCJnZXQtYWxsIGV2ZW50OiBcIiArIEpTT04uc3RyaW5naWZ5KGV2ZW50KSk7XG5cbiAgY29uc3QgcXVlcnlTdHJpbmdQYXJhbWV0ZXJzID0gZXZlbnQucXVlcnlTdHJpbmdQYXJhbWV0ZXJzO1xuXG4gIC8vIGNvbnN0IHVzZXJOYW1lID0gTU9DS19BVVRIX1VTRVJOQU1FID09PSAnZmFsc2UnID8gJ2JvaW5nJyA6IHF1ZXJ5U3RyaW5nUGFyYW1ldGVyc1snbW9ja2VkVXNlcklkJ107XG4gIC8vIGNvbnN0IHBhcmFtcyA9IHtcbiAgLy8gICBUYWJsZU5hbWU6IEFETUlOX1RBQkxFX05BTUUsXG4gIC8vICAgS2V5OiB7XG4gIC8vICAgICBbUFJJTUFSWV9LRVldOiBpdGVtW1BSSU1BUllfS0VZXSxcbiAgLy8gICB9LFxuICAvLyB9O1xuXG4gIC8vIGNvbnNvbGUuZGVidWcoXCJwYXJhbXM6IFwiICsgSlNPTi5zdHJpbmdpZnkocGFyYW1zKSk7XG4gIC8vIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZGIuZ2V0KHBhcmFtcykucHJvbWlzZSgpO1xuICAvLyBjb25zdCBpc0FkbWluID1cblxuICB0cnkge1xuICAgIHZhciByZXNwb25zZTtcbiAgICBpZihxdWVyeVN0cmluZ1BhcmFtZXRlcnMgJiYgcXVlcnlTdHJpbmdQYXJhbWV0ZXJzW2luc3RhbmNlVGFibGUucHJpbWFyeUtleV0pe1xuICAgICAgcmVzcG9uc2UgPSBhd2FpdCBkYi5xdWVyeSh7XG4gICAgICAgIFRhYmxlTmFtZTogaW5zdGFuY2VUYWJsZS5uYW1lLFxuICAgICAgICBLZXlDb25kaXRpb25FeHByZXNzaW9uOiAnI2FsZlVzZXJJZCA9IDphbGZVc2VySWQnLFxuICAgICAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IHsnI2FsZlVzZXJJZCc6ICdhbGZVc2VySWQnfSxcbiAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogeyAnOmFsZlVzZXJJZCc6IHF1ZXJ5U3RyaW5nUGFyYW1ldGVyc1tpbnN0YW5jZVRhYmxlLnByaW1hcnlLZXldIH1cbiAgICAgIH0pLnByb21pc2UoKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICByZXNwb25zZSA9IGF3YWl0IGRiLnNjYW4oe1xuICAgICAgICAgIFRhYmxlTmFtZTogaW5zdGFuY2VUYWJsZS5wcmltYXJ5S2V5LFxuICAgICAgICB9KS5wcm9taXNlKCk7XG4gICAgIH1cblxuICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDIwMCwgYm9keTogSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuSXRlbXMpLCBoZWFkZXJzOiBoZWFkZXJzfTtcbiAgfSBjYXRjaCAoZGJFcnJvcikge1xuICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDUwMCwgYm9keTogSlNPTi5zdHJpbmdpZnkoZGJFcnJvciksIGhlYWRlcnM6IGhlYWRlcnMgfTtcbiAgfVxufTtcbiJdfQ==