"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * The Alfresco Provisioner
 * First of all. Thank you for joining the closed alpha. Your feedback will be much welcomed. The Alfresco Provisioner is a managed service to provide Alfresco backends with an awesome experience. For more details please look https://martinmueller.dev/alf-provisioner-eng.  As the Alfresco Provisioner is a managed service to provide Alfresco backends it would be very great if you could get a roughly overview about what the Alfresco products are for. In my blog post mentioned above I give you a rough overview about the Alfresco products in the Closed Alpha section.  As this is an alpha version, you will find for sure bugs. Please report them back to me under: damadden88@googlemail.com  Notice: As this is an early version of the Alfresco Provisioner a lot features are not implemented yet.  I decided not to bother much with the complexity of authorization and permission yet. I will add those as a layer. So for now it is possible to alter resources belonging to an other user than you. Please don\'t do that if not agreed and only use your username for instance creation. Anyway the endpoints themself are indeed secured with oauth2 and an implicit grant which is put in the Authorization header. SO USING THE AUTHORIZE POPUP IN THE UI ISN\'T NECESSARY.  If you see returning a 401 with the message \"The incoming token has expired\" just refresh the page and a new token will be generated.  For cost saving reasons per default the EC2 instance will stop themself after 45 minutes after creation or update. You can start the instance again with using the PUT endpoint. As well you are only allowed to create a maximum of 2 instances per user. Please terminate not used instances with the PUT endpoint and \"expectedStatus\" = \"terminated\".  How to start?: Simply explore the provided endpoints in the next section. The endpoints in the tag group named instances are showing your / all existent Alfresco Instanzes. The group tag named instances-conf helps to request alfresco instances or alter them. For a starter you could use the POST Endpoint to request the creation of an Alfresco instanz. Than check your request with the GET endpoints in the instance-conf tag group. If your instance request was granted you will find your instanz in the instances tag group. Please regard that the alfresco url will be available after about 3 minutes as it takes a bit for ACS to boot successfully. After that /share /alfresco and ACA / will be reachable on the url similar looking to iab12.i.alfpro.net .  Implemented features:   * Start, Stopping and Terminating of Alfresco instances   * Accessing ACA, Share and Alfresco Urls (more details look for the url property definition below)   * Cost Saving feature for stopping the instances after 45 minutes   * Asynchronacl communication with the Alfresco Provisioner server   * using the authenticated username as userId for convenience  Planned features in near future:   * Status endpoint for instance creation progress   * Adding an Auto Scaling in front of the ec2 image for autoself healing and a health check if ACS is finished booting and ready   * SSL encryption. Currently there is no HTTPS configured with the Proxy in front of each Alfresco instanz provisioned by the Provisioner. So be cautious to not store sensible data!   * Email notification. I plan to send an email when your Alfresco Instanz is ready. But for now you need to check the progress on the GET /instances-conf endpoint and the info property.  Planned features in more distance future:   * Stopping instances after inactivity and not the static 45 minutes.   * Potentially Load Balancer in front to drive multiple instances for bigger use cases  Again thank you so much for testing the Alfresco Provisioner. Any feedback is much welcomed! Please let me know on damadden88@googlemail.com .
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Configuration = void 0;
class Configuration {
    constructor(param = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
exports.Configuration = Configuration;
//# sourceMappingURL=data:application/json;base64,