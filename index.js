"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const logs = require("@aws-cdk/aws-logs");
const AlfCdkRestApi_1 = require("./AlfCdkRestApi");
const AlfCdkTables_1 = require("./lib/AlfCdkTables");
const AlfCdkLambdas_1 = require("./lib/AlfCdkLambdas");
const AlfCdkStepFunctions_1 = require("./lib/AlfCdkStepFunctions");
class AlfInstancesStack extends core_1.Stack {
    constructor(app, id, props) {
        super(app, id, props);
        const lambdas = new AlfCdkLambdas_1.AlfCdkLambdas(this, props);
        new AlfCdkTables_1.AlfCdkTables(this, lambdas);
        new AlfCdkRestApi_1.AlfCdkRestApi(this, lambdas, props);
        const stepFunctions = new AlfCdkStepFunctions_1.AlfCdkStepFunctions(this, lambdas);
        lambdas.createOneApi.addEnvironment('STATE_MACHINE_ARN', stepFunctions.createStateMachine.stateMachineArn);
        lambdas.updateOneApi.addEnvironment('STATE_MACHINE_ARN', stepFunctions.updateStateMachine.stateMachineArn);
        // Configure log group for short retention
        const logGroup = new logs.LogGroup(this, 'LogGroup', {
            retention: logs.RetentionDays.ONE_DAY,
            removalPolicy: core_1.RemovalPolicy.DESTROY,
            logGroupName: '/aws/lambda/custom/' + this.stackName
        });
        const lgstream = logGroup.addStream('myloggroupStream');
        new core_1.CfnOutput(this, 'LogGroupName', {
            value: logGroup.logGroupName
        });
        new core_1.CfnOutput(this, 'LogGroupStreamName', {
            value: lgstream.logStreamName
        });
    }
}
exports.AlfInstancesStack = AlfInstancesStack;
const app = new core_1.App();
new AlfInstancesStack(app, "AlfInstancesStackEuWest2Prod", {
    environment: 'prod',
    env: {
        region: "eu-west-2",
        account: '981237193288'
    },
    // disable create ec2 instance
    // createInstances: {
    //   imageId: 'ami-04d5cc9b88f9d1d39'
    // },
    // auth: {
    //   cognito: {
    //     userPoolArn: 'arn:aws:cognito-idp:eu-west-2:981237193288:userpool/eu-west-2_9BVmRPfz1'
    //   }
    // },
    swagger: {
        file: 'tmp/swagger_full_.yaml',
        domain: {
            domainName: 'h-o.dev',
            subdomain: 'api-explorer',
            certificateArn: 'arn:aws:acm:us-east-1:981237193288:certificate/ff4bd794-01eb-4a5a-8e16-c8d3151845da'
        }
    },
    domain: {
        domainName: 'api.h-o.dev',
        zoneName: 'api.h-o.dev.',
        hostedZoneId: 'Z087093236D67UXK26HG',
        certificateArn: 'arn:aws:acm:eu-west-2:981237193288:certificate/18671030-753d-4047-8e26-76794b69fa7b'
    }
});
new AlfInstancesStack(app, "AlfInstancesStackEuWest2", {
    environment: 'dev',
    env: {
        region: 'eu-west-2',
        account: '609841182532'
    },
    auth: {
        mockAuth: {
            userName: 'bald'
        }
    },
    createInstances: {
        imageId: 'ami-0cb790308f7591fa6'
    },
    // cognito
    swagger: {
        file: 'tmp/swagger_full.yaml',
    },
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUFpRjtBQUNqRiwwQ0FBMkM7QUFDM0MsbURBQXdEO0FBQ3hELHFEQUFrRDtBQUNsRCx1REFBb0Q7QUFDcEQsbUVBQWdFO0FBNkJoRSxNQUFhLGlCQUFrQixTQUFRLFlBQUs7SUFDMUMsWUFBWSxHQUFRLEVBQUUsRUFBVSxFQUFFLEtBQThCO1FBQzlELEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXRCLE1BQU0sT0FBTyxHQUFHLElBQUksNkJBQWEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFL0MsSUFBSSwyQkFBWSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUVoQyxJQUFJLDZCQUFhLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QyxNQUFNLGFBQWEsR0FBRyxJQUFJLHlDQUFtQixDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUU3RCxPQUFPLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxtQkFBbUIsRUFBRSxhQUFhLENBQUMsa0JBQWtCLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDM0csT0FBTyxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsbUJBQW1CLEVBQUUsYUFBYSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxDQUFBO1FBRTFHLDBDQUEwQztRQUMxQyxNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUNuRCxTQUFTLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPO1lBQ3JDLGFBQWEsRUFBRSxvQkFBYSxDQUFDLE9BQU87WUFDcEMsWUFBWSxFQUFFLHFCQUFxQixHQUFHLElBQUksQ0FBQyxTQUFTO1NBQ3JELENBQUMsQ0FBQztRQUVILE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtRQUV2RCxJQUFJLGdCQUFTLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUNsQyxLQUFLLEVBQUUsUUFBUSxDQUFDLFlBQVk7U0FDN0IsQ0FBQyxDQUFDO1FBRUgsSUFBSSxnQkFBUyxDQUFDLElBQUksRUFBRSxvQkFBb0IsRUFBRTtZQUN4QyxLQUFLLEVBQUUsUUFBUSxDQUFDLGFBQWE7U0FDOUIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBaENELDhDQWdDQztBQUVELE1BQU0sR0FBRyxHQUFHLElBQUksVUFBRyxFQUFFLENBQUM7QUFFdEIsSUFBSSxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsOEJBQThCLEVBQUU7SUFDdkQsV0FBVyxFQUFFLE1BQU07SUFDbkIsR0FBRyxFQUFFO1FBQ0gsTUFBTSxFQUFFLFdBQVc7UUFDbkIsT0FBTyxFQUFFLGNBQWM7S0FDeEI7SUFDRCw4QkFBOEI7SUFDOUIscUJBQXFCO0lBQ3JCLHFDQUFxQztJQUNyQyxLQUFLO0lBQ0wsVUFBVTtJQUNWLGVBQWU7SUFDZiw2RkFBNkY7SUFDN0YsTUFBTTtJQUNOLEtBQUs7SUFDTCxPQUFPLEVBQUU7UUFDUCxJQUFJLEVBQUUsd0JBQXdCO1FBQzlCLE1BQU0sRUFBRTtZQUNOLFVBQVUsRUFBRSxTQUFTO1lBQ3JCLFNBQVMsRUFBRSxjQUFjO1lBQ3pCLGNBQWMsRUFBRSxxRkFBcUY7U0FDdEc7S0FDRjtJQUNELE1BQU0sRUFBRTtRQUNOLFVBQVUsRUFBRSxhQUFhO1FBQ3pCLFFBQVEsRUFBRSxjQUFjO1FBQ3hCLFlBQVksRUFBRSxzQkFBc0I7UUFDcEMsY0FBYyxFQUFFLHFGQUFxRjtLQUN0RztDQUNGLENBQUMsQ0FBQztBQUVMLElBQUksaUJBQWlCLENBQUMsR0FBRyxFQUFFLDBCQUEwQixFQUFFO0lBQ3JELFdBQVcsRUFBRSxLQUFLO0lBQ2xCLEdBQUcsRUFBRTtRQUNILE1BQU0sRUFBRSxXQUFXO1FBQ25CLE9BQU8sRUFBRSxjQUFjO0tBQ3hCO0lBQ0QsSUFBSSxFQUFFO1FBQ0osUUFBUSxFQUFFO1lBQ1IsUUFBUSxFQUFFLE1BQU07U0FDakI7S0FDRjtJQUNELGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSx1QkFBdUI7S0FDakM7SUFDRCxVQUFVO0lBQ1YsT0FBTyxFQUFFO1FBQ1AsSUFBSSxFQUFFLHVCQUF1QjtLQUk5QjtDQU9GLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YWNrUHJvcHMsIFN0YWNrLCBBcHAsIFJlbW92YWxQb2xpY3ksIENmbk91dHB1dCB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0IGxvZ3MgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtbG9ncycpO1xuaW1wb3J0IHsgQWxmQ2RrUmVzdEFwaSwgRG9tYWluIH0gZnJvbSAnLi9BbGZDZGtSZXN0QXBpJztcbmltcG9ydCB7IEFsZkNka1RhYmxlcyB9IGZyb20gJy4vbGliL0FsZkNka1RhYmxlcyc7XG5pbXBvcnQgeyBBbGZDZGtMYW1iZGFzIH0gZnJvbSAnLi9saWIvQWxmQ2RrTGFtYmRhcyc7XG5pbXBvcnQgeyBBbGZDZGtTdGVwRnVuY3Rpb25zIH0gZnJvbSAnLi9saWIvQWxmQ2RrU3RlcEZ1bmN0aW9ucyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWxmSW5zdGFuY2VzU3RhY2tQcm9wcyBleHRlbmRzIFN0YWNrUHJvcHMge1xuICAvKipcbiAgICogaWYgdW5kZWZpbmVkIG5vIGVjMiBpbnN0YW5jZXMgd2lsbCBiZSBjcmVhdGVkXG4gICAqL1xuICBjcmVhdGVJbnN0YW5jZXM/OiB7XG4gICAgaW1hZ2VJZDogc3RyaW5nXG4gIH0sXG4gIHN3YWdnZXI/OiB7XG4gICAgZmlsZTogc3RyaW5nLFxuICAgIGRvbWFpbj86IHtcbiAgICAgIGRvbWFpbk5hbWU6IHN0cmluZyxcbiAgICAgIHN1YmRvbWFpbjogc3RyaW5nLFxuICAgICAgY2VydGlmaWNhdGVBcm46IHN0cmluZ1xuICAgIH1cbiAgfVxuICBhdXRoPzoge1xuICAgIG1vY2tBdXRoPzoge1xuICAgICAgdXNlck5hbWU/OiBzdHJpbmdcbiAgICB9LFxuICAgIGNvZ25pdG8/OiB7XG4gICAgICB1c2VyUG9vbEFybj86IHN0cmluZ1xuICAgIH0sXG4gIH1cbiAgZW52aXJvbm1lbnQ6IHN0cmluZ1xuICBkb21haW4/OiBEb21haW5cbn1cblxuZXhwb3J0IGNsYXNzIEFsZkluc3RhbmNlc1N0YWNrIGV4dGVuZHMgU3RhY2sge1xuICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgaWQ6IHN0cmluZywgcHJvcHM/OiBBbGZJbnN0YW5jZXNTdGFja1Byb3BzKSB7XG4gICAgc3VwZXIoYXBwLCBpZCwgcHJvcHMpO1xuXG4gICAgY29uc3QgbGFtYmRhcyA9IG5ldyBBbGZDZGtMYW1iZGFzKHRoaXMsIHByb3BzKTtcblxuICAgIG5ldyBBbGZDZGtUYWJsZXModGhpcywgbGFtYmRhcyk7XG5cbiAgICBuZXcgQWxmQ2RrUmVzdEFwaSh0aGlzLCBsYW1iZGFzLCBwcm9wcyk7XG5cbiAgICBjb25zdCBzdGVwRnVuY3Rpb25zID0gbmV3IEFsZkNka1N0ZXBGdW5jdGlvbnModGhpcywgbGFtYmRhcyk7XG5cbiAgICBsYW1iZGFzLmNyZWF0ZU9uZUFwaS5hZGRFbnZpcm9ubWVudCgnU1RBVEVfTUFDSElORV9BUk4nLCBzdGVwRnVuY3Rpb25zLmNyZWF0ZVN0YXRlTWFjaGluZS5zdGF0ZU1hY2hpbmVBcm4pO1xuICAgIGxhbWJkYXMudXBkYXRlT25lQXBpLmFkZEVudmlyb25tZW50KCdTVEFURV9NQUNISU5FX0FSTicsIHN0ZXBGdW5jdGlvbnMudXBkYXRlU3RhdGVNYWNoaW5lLnN0YXRlTWFjaGluZUFybilcblxuICAgIC8vIENvbmZpZ3VyZSBsb2cgZ3JvdXAgZm9yIHNob3J0IHJldGVudGlvblxuICAgIGNvbnN0IGxvZ0dyb3VwID0gbmV3IGxvZ3MuTG9nR3JvdXAodGhpcywgJ0xvZ0dyb3VwJywge1xuICAgICAgcmV0ZW50aW9uOiBsb2dzLlJldGVudGlvbkRheXMuT05FX0RBWSxcbiAgICAgIHJlbW92YWxQb2xpY3k6IFJlbW92YWxQb2xpY3kuREVTVFJPWSxcbiAgICAgIGxvZ0dyb3VwTmFtZTogJy9hd3MvbGFtYmRhL2N1c3RvbS8nICsgdGhpcy5zdGFja05hbWVcbiAgICB9KTtcblxuICAgIGNvbnN0IGxnc3RyZWFtID0gbG9nR3JvdXAuYWRkU3RyZWFtKCdteWxvZ2dyb3VwU3RyZWFtJylcblxuICAgIG5ldyBDZm5PdXRwdXQodGhpcywgJ0xvZ0dyb3VwTmFtZScsIHtcbiAgICAgIHZhbHVlOiBsb2dHcm91cC5sb2dHcm91cE5hbWVcbiAgICB9KTtcblxuICAgIG5ldyBDZm5PdXRwdXQodGhpcywgJ0xvZ0dyb3VwU3RyZWFtTmFtZScsIHtcbiAgICAgIHZhbHVlOiBsZ3N0cmVhbS5sb2dTdHJlYW1OYW1lXG4gICAgfSk7XG4gIH1cbn1cblxuY29uc3QgYXBwID0gbmV3IEFwcCgpO1xuXG5uZXcgQWxmSW5zdGFuY2VzU3RhY2soYXBwLCBcIkFsZkluc3RhbmNlc1N0YWNrRXVXZXN0MlByb2RcIiwge1xuICAgIGVudmlyb25tZW50OiAncHJvZCcsXG4gICAgZW52OiB7XG4gICAgICByZWdpb246IFwiZXUtd2VzdC0yXCIsXG4gICAgICBhY2NvdW50OiAnOTgxMjM3MTkzMjg4J1xuICAgIH0sXG4gICAgLy8gZGlzYWJsZSBjcmVhdGUgZWMyIGluc3RhbmNlXG4gICAgLy8gY3JlYXRlSW5zdGFuY2VzOiB7XG4gICAgLy8gICBpbWFnZUlkOiAnYW1pLTA0ZDVjYzliODhmOWQxZDM5J1xuICAgIC8vIH0sXG4gICAgLy8gYXV0aDoge1xuICAgIC8vICAgY29nbml0bzoge1xuICAgIC8vICAgICB1c2VyUG9vbEFybjogJ2Fybjphd3M6Y29nbml0by1pZHA6ZXUtd2VzdC0yOjk4MTIzNzE5MzI4ODp1c2VycG9vbC9ldS13ZXN0LTJfOUJWbVJQZnoxJ1xuICAgIC8vICAgfVxuICAgIC8vIH0sXG4gICAgc3dhZ2dlcjoge1xuICAgICAgZmlsZTogJ3RtcC9zd2FnZ2VyX2Z1bGxfLnlhbWwnLFxuICAgICAgZG9tYWluOiB7XG4gICAgICAgIGRvbWFpbk5hbWU6ICdoLW8uZGV2JyxcbiAgICAgICAgc3ViZG9tYWluOiAnYXBpLWV4cGxvcmVyJyxcbiAgICAgICAgY2VydGlmaWNhdGVBcm46ICdhcm46YXdzOmFjbTp1cy1lYXN0LTE6OTgxMjM3MTkzMjg4OmNlcnRpZmljYXRlL2ZmNGJkNzk0LTAxZWItNGE1YS04ZTE2LWM4ZDMxNTE4NDVkYSdcbiAgICAgIH1cbiAgICB9LFxuICAgIGRvbWFpbjoge1xuICAgICAgZG9tYWluTmFtZTogJ2FwaS5oLW8uZGV2JyxcbiAgICAgIHpvbmVOYW1lOiAnYXBpLmgtby5kZXYuJyxcbiAgICAgIGhvc3RlZFpvbmVJZDogJ1owODcwOTMyMzZENjdVWEsyNkhHJyxcbiAgICAgIGNlcnRpZmljYXRlQXJuOiAnYXJuOmF3czphY206ZXUtd2VzdC0yOjk4MTIzNzE5MzI4ODpjZXJ0aWZpY2F0ZS8xODY3MTAzMC03NTNkLTQwNDctOGUyNi03Njc5NGI2OWZhN2InXG4gICAgfVxuICB9KTtcblxubmV3IEFsZkluc3RhbmNlc1N0YWNrKGFwcCwgXCJBbGZJbnN0YW5jZXNTdGFja0V1V2VzdDJcIiwge1xuICBlbnZpcm9ubWVudDogJ2RldicsXG4gIGVudjoge1xuICAgIHJlZ2lvbjogJ2V1LXdlc3QtMicsXG4gICAgYWNjb3VudDogJzYwOTg0MTE4MjUzMidcbiAgfSxcbiAgYXV0aDoge1xuICAgIG1vY2tBdXRoOiB7XG4gICAgICB1c2VyTmFtZTogJ2JhbGQnXG4gICAgfVxuICB9LFxuICBjcmVhdGVJbnN0YW5jZXM6IHtcbiAgICBpbWFnZUlkOiAnYW1pLTBjYjc5MDMwOGY3NTkxZmE2J1xuICB9LFxuICAvLyBjb2duaXRvXG4gIHN3YWdnZXI6IHtcbiAgICBmaWxlOiAndG1wL3N3YWdnZXJfZnVsbC55YW1sJyxcbiAgICAvLyBkb21haW46ICdoLW8uZGV2JyxcbiAgICAvLyBzdWJkb21haW46ICdhcGktZXhwbG9yZXInLFxuICAgIC8vIGNlcnRpZmljYXRlQXJuOiAnYXJuOmF3czphY206dXMtZWFzdC0xOjYwOTg0MTE4MjUzMjpjZXJ0aWZpY2F0ZS9mMjk5Yjc1Yi1mMjJjLTQwNGQtOThmMi04OTUyOWY0ZDJjOTYnXG4gIH0sXG4gIC8vIGRvbWFpbjoge1xuICAvLyAgIGRvbWFpbk5hbWU6ICdhcGkuaC1vLmRldicsXG4gIC8vICAgem9uZU5hbWU6ICdhcGkuaC1vLmRldi4nLFxuICAvLyAgIGhvc3RlZFpvbmVJZDogJ1owMTQ4NjUyMVo4MTNFTVNLTldOSCcsXG4gIC8vICAgY2VydGlmaWNhdGVBcm46ICdhcm46YXdzOmFjbTpldS13ZXN0LTI6NjA5ODQxMTgyNTMyOmNlcnRpZmljYXRlLzg2MTZlNGUzLTg1NzAtNDJkYi05Y2JkLTZlNmU3NmRhM2M1ZidcbiAgLy8gfVxufSk7XG5cbmFwcC5zeW50aCgpO1xuIl19