"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const logs = require("@aws-cdk/aws-logs");
const AlfCdkRestApi_1 = require("./AlfCdkRestApi");
const AlfCdkTables_1 = require("./lib/AlfCdkTables");
const AlfCdkLambdas_1 = require("./lib/AlfCdkLambdas");
const AlfCdkStepFunctions_1 = require("./lib/AlfCdkStepFunctions");
class AlfInstancesStack extends core_1.Stack {
    constructor(app, id, props) {
        super(app, id, props);
        const lambdas = new AlfCdkLambdas_1.AlfCdkLambdas(this, props);
        new AlfCdkTables_1.AlfCdkTables(this, lambdas);
        new AlfCdkRestApi_1.AlfCdkRestApi(this, lambdas, props);
        const stepFunctions = new AlfCdkStepFunctions_1.AlfCdkStepFunctions(this, lambdas);
        lambdas.createOneApi.addEnvironment('STATE_MACHINE_ARN', stepFunctions.createStateMachine.stateMachineArn);
        lambdas.updateOneApi.addEnvironment('STATE_MACHINE_ARN', stepFunctions.updateStateMachine.stateMachineArn);
        // Configure log group for short retention
        const logGroup = new logs.LogGroup(this, 'LogGroup', {
            retention: logs.RetentionDays.ONE_DAY,
            removalPolicy: core_1.RemovalPolicy.DESTROY,
            logGroupName: '/aws/lambda/custom/' + this.stackName
        });
        const lgstream = logGroup.addStream('myloggroupStream');
        new core_1.CfnOutput(this, 'LogGroupName', {
            value: logGroup.logGroupName
        });
        new core_1.CfnOutput(this, 'LogGroupStreamName', {
            value: lgstream.logStreamName
        });
    }
}
exports.AlfInstancesStack = AlfInstancesStack;
const app = new core_1.App();
new AlfInstancesStack(app, "AlfInstancesStackEuWest2Prod", {
    environment: 'prod',
    env: {
        region: "eu-west-2",
        account: '981237193288'
    },
    // disable create ec2 instance
    // createInstances: {
    //   imageId: 'ami-04d5cc9b88f9d1d39'
    // },
    cognito: 'blub',
    swagger: {
        file: 'tmp/swagger_full_.yaml',
        domain: {
            domainName: 'h-o.dev',
            subdomain: 'api-explorer',
            certificateArn: 'arn:aws:acm:us-east-1:981237193288:certificate/ff4bd794-01eb-4a5a-8e16-c8d3151845da'
        }
    },
    domain: {
        domainName: 'api.h-o.dev',
        zoneName: 'api.h-o.dev.',
        hostedZoneId: 'Z087093236D67UXK26HG',
        certificateArn: 'arn:aws:acm:eu-west-2:981237193288:certificate/18671030-753d-4047-8e26-76794b69fa7b'
    }
});
new AlfInstancesStack(app, "AlfInstancesStackEuWest2", {
    environment: 'dev',
    env: {
        region: 'eu-west-2',
        account: '609841182532'
    },
    createInstances: {
        imageId: 'ami-0cb790308f7591fa6'
    },
    // cognito
    swagger: {
        file: 'tmp/swagger_full.yaml',
    },
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUFpRjtBQUNqRiwwQ0FBMkM7QUFDM0MsbURBQXdEO0FBQ3hELHFEQUFrRDtBQUNsRCx1REFBb0Q7QUFDcEQsbUVBQWdFO0FBc0JoRSxNQUFhLGlCQUFrQixTQUFRLFlBQUs7SUFDMUMsWUFBWSxHQUFRLEVBQUUsRUFBVSxFQUFFLEtBQThCO1FBQzlELEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXRCLE1BQU0sT0FBTyxHQUFHLElBQUksNkJBQWEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFL0MsSUFBSSwyQkFBWSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUVoQyxJQUFJLDZCQUFhLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QyxNQUFNLGFBQWEsR0FBRyxJQUFJLHlDQUFtQixDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUU3RCxPQUFPLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxtQkFBbUIsRUFBRSxhQUFhLENBQUMsa0JBQWtCLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDM0csT0FBTyxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsbUJBQW1CLEVBQUUsYUFBYSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxDQUFBO1FBRTFHLDBDQUEwQztRQUMxQyxNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUNuRCxTQUFTLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPO1lBQ3JDLGFBQWEsRUFBRSxvQkFBYSxDQUFDLE9BQU87WUFDcEMsWUFBWSxFQUFFLHFCQUFxQixHQUFHLElBQUksQ0FBQyxTQUFTO1NBQ3JELENBQUMsQ0FBQztRQUVILE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtRQUV2RCxJQUFJLGdCQUFTLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUNsQyxLQUFLLEVBQUUsUUFBUSxDQUFDLFlBQVk7U0FDN0IsQ0FBQyxDQUFDO1FBRUgsSUFBSSxnQkFBUyxDQUFDLElBQUksRUFBRSxvQkFBb0IsRUFBRTtZQUN4QyxLQUFLLEVBQUUsUUFBUSxDQUFDLGFBQWE7U0FDOUIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBaENELDhDQWdDQztBQUVELE1BQU0sR0FBRyxHQUFHLElBQUksVUFBRyxFQUFFLENBQUM7QUFFdEIsSUFBSSxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsOEJBQThCLEVBQUU7SUFDdkQsV0FBVyxFQUFFLE1BQU07SUFDbkIsR0FBRyxFQUFFO1FBQ0gsTUFBTSxFQUFFLFdBQVc7UUFDbkIsT0FBTyxFQUFFLGNBQWM7S0FDeEI7SUFDRCw4QkFBOEI7SUFDOUIscUJBQXFCO0lBQ3JCLHFDQUFxQztJQUNyQyxLQUFLO0lBQ0wsT0FBTyxFQUFFLE1BQU07SUFDZixPQUFPLEVBQUU7UUFDUCxJQUFJLEVBQUUsd0JBQXdCO1FBQzlCLE1BQU0sRUFBRTtZQUNOLFVBQVUsRUFBRSxTQUFTO1lBQ3JCLFNBQVMsRUFBRSxjQUFjO1lBQ3pCLGNBQWMsRUFBRSxxRkFBcUY7U0FDdEc7S0FDRjtJQUNELE1BQU0sRUFBRTtRQUNOLFVBQVUsRUFBRSxhQUFhO1FBQ3pCLFFBQVEsRUFBRSxjQUFjO1FBQ3hCLFlBQVksRUFBRSxzQkFBc0I7UUFDcEMsY0FBYyxFQUFFLHFGQUFxRjtLQUN0RztDQUNGLENBQUMsQ0FBQztBQUVMLElBQUksaUJBQWlCLENBQUMsR0FBRyxFQUFFLDBCQUEwQixFQUFFO0lBQ3JELFdBQVcsRUFBRSxLQUFLO0lBQ2xCLEdBQUcsRUFBRTtRQUNILE1BQU0sRUFBRSxXQUFXO1FBQ25CLE9BQU8sRUFBRSxjQUFjO0tBQ3hCO0lBQ0QsZUFBZSxFQUFFO1FBQ2YsT0FBTyxFQUFFLHVCQUF1QjtLQUNqQztJQUNELFVBQVU7SUFDVixPQUFPLEVBQUU7UUFDUCxJQUFJLEVBQUUsdUJBQXVCO0tBSTlCO0NBT0YsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhY2tQcm9wcywgU3RhY2ssIEFwcCwgUmVtb3ZhbFBvbGljeSwgQ2ZuT3V0cHV0IH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgbG9ncyA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1sb2dzJyk7XG5pbXBvcnQgeyBBbGZDZGtSZXN0QXBpLCBEb21haW4gfSBmcm9tICcuL0FsZkNka1Jlc3RBcGknO1xuaW1wb3J0IHsgQWxmQ2RrVGFibGVzIH0gZnJvbSAnLi9saWIvQWxmQ2RrVGFibGVzJztcbmltcG9ydCB7IEFsZkNka0xhbWJkYXMgfSBmcm9tICcuL2xpYi9BbGZDZGtMYW1iZGFzJztcbmltcG9ydCB7IEFsZkNka1N0ZXBGdW5jdGlvbnMgfSBmcm9tICcuL2xpYi9BbGZDZGtTdGVwRnVuY3Rpb25zJztcblxuZXhwb3J0IGludGVyZmFjZSBBbGZJbnN0YW5jZXNTdGFja1Byb3BzIGV4dGVuZHMgU3RhY2tQcm9wcyB7XG4gIC8qKlxuICAgKiBpZiB1bmRlZmluZWQgbm8gZWMyIGluc3RhbmNlcyB3aWxsIGJlIGNyZWF0ZWRcbiAgICovXG4gIGNyZWF0ZUluc3RhbmNlcz86IHtcbiAgICBpbWFnZUlkOiBzdHJpbmdcbiAgfSxcbiAgc3dhZ2dlcj86IHtcbiAgICBmaWxlOiBzdHJpbmcsXG4gICAgZG9tYWluPzoge1xuICAgICAgZG9tYWluTmFtZTogc3RyaW5nLFxuICAgICAgc3ViZG9tYWluOiBzdHJpbmcsXG4gICAgICBjZXJ0aWZpY2F0ZUFybjogc3RyaW5nXG4gICAgfVxuICB9XG4gIGNvZ25pdG8/OiBzdHJpbmcsXG4gIGVudmlyb25tZW50OiBzdHJpbmdcbiAgZG9tYWluPzogRG9tYWluXG59XG5cbmV4cG9ydCBjbGFzcyBBbGZJbnN0YW5jZXNTdGFjayBleHRlbmRzIFN0YWNrIHtcbiAgY29uc3RydWN0b3IoYXBwOiBBcHAsIGlkOiBzdHJpbmcsIHByb3BzPzogQWxmSW5zdGFuY2VzU3RhY2tQcm9wcykge1xuICAgIHN1cGVyKGFwcCwgaWQsIHByb3BzKTtcblxuICAgIGNvbnN0IGxhbWJkYXMgPSBuZXcgQWxmQ2RrTGFtYmRhcyh0aGlzLCBwcm9wcyk7XG5cbiAgICBuZXcgQWxmQ2RrVGFibGVzKHRoaXMsIGxhbWJkYXMpO1xuXG4gICAgbmV3IEFsZkNka1Jlc3RBcGkodGhpcywgbGFtYmRhcywgcHJvcHMpO1xuXG4gICAgY29uc3Qgc3RlcEZ1bmN0aW9ucyA9IG5ldyBBbGZDZGtTdGVwRnVuY3Rpb25zKHRoaXMsIGxhbWJkYXMpO1xuXG4gICAgbGFtYmRhcy5jcmVhdGVPbmVBcGkuYWRkRW52aXJvbm1lbnQoJ1NUQVRFX01BQ0hJTkVfQVJOJywgc3RlcEZ1bmN0aW9ucy5jcmVhdGVTdGF0ZU1hY2hpbmUuc3RhdGVNYWNoaW5lQXJuKTtcbiAgICBsYW1iZGFzLnVwZGF0ZU9uZUFwaS5hZGRFbnZpcm9ubWVudCgnU1RBVEVfTUFDSElORV9BUk4nLCBzdGVwRnVuY3Rpb25zLnVwZGF0ZVN0YXRlTWFjaGluZS5zdGF0ZU1hY2hpbmVBcm4pXG5cbiAgICAvLyBDb25maWd1cmUgbG9nIGdyb3VwIGZvciBzaG9ydCByZXRlbnRpb25cbiAgICBjb25zdCBsb2dHcm91cCA9IG5ldyBsb2dzLkxvZ0dyb3VwKHRoaXMsICdMb2dHcm91cCcsIHtcbiAgICAgIHJldGVudGlvbjogbG9ncy5SZXRlbnRpb25EYXlzLk9ORV9EQVksXG4gICAgICByZW1vdmFsUG9saWN5OiBSZW1vdmFsUG9saWN5LkRFU1RST1ksXG4gICAgICBsb2dHcm91cE5hbWU6ICcvYXdzL2xhbWJkYS9jdXN0b20vJyArIHRoaXMuc3RhY2tOYW1lXG4gICAgfSk7XG5cbiAgICBjb25zdCBsZ3N0cmVhbSA9IGxvZ0dyb3VwLmFkZFN0cmVhbSgnbXlsb2dncm91cFN0cmVhbScpXG5cbiAgICBuZXcgQ2ZuT3V0cHV0KHRoaXMsICdMb2dHcm91cE5hbWUnLCB7XG4gICAgICB2YWx1ZTogbG9nR3JvdXAubG9nR3JvdXBOYW1lXG4gICAgfSk7XG5cbiAgICBuZXcgQ2ZuT3V0cHV0KHRoaXMsICdMb2dHcm91cFN0cmVhbU5hbWUnLCB7XG4gICAgICB2YWx1ZTogbGdzdHJlYW0ubG9nU3RyZWFtTmFtZVxuICAgIH0pO1xuICB9XG59XG5cbmNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcblxubmV3IEFsZkluc3RhbmNlc1N0YWNrKGFwcCwgXCJBbGZJbnN0YW5jZXNTdGFja0V1V2VzdDJQcm9kXCIsIHtcbiAgICBlbnZpcm9ubWVudDogJ3Byb2QnLFxuICAgIGVudjoge1xuICAgICAgcmVnaW9uOiBcImV1LXdlc3QtMlwiLFxuICAgICAgYWNjb3VudDogJzk4MTIzNzE5MzI4OCdcbiAgICB9LFxuICAgIC8vIGRpc2FibGUgY3JlYXRlIGVjMiBpbnN0YW5jZVxuICAgIC8vIGNyZWF0ZUluc3RhbmNlczoge1xuICAgIC8vICAgaW1hZ2VJZDogJ2FtaS0wNGQ1Y2M5Yjg4ZjlkMWQzOSdcbiAgICAvLyB9LFxuICAgIGNvZ25pdG86ICdibHViJyxcbiAgICBzd2FnZ2VyOiB7XG4gICAgICBmaWxlOiAndG1wL3N3YWdnZXJfZnVsbF8ueWFtbCcsXG4gICAgICBkb21haW46IHtcbiAgICAgICAgZG9tYWluTmFtZTogJ2gtby5kZXYnLFxuICAgICAgICBzdWJkb21haW46ICdhcGktZXhwbG9yZXInLFxuICAgICAgICBjZXJ0aWZpY2F0ZUFybjogJ2Fybjphd3M6YWNtOnVzLWVhc3QtMTo5ODEyMzcxOTMyODg6Y2VydGlmaWNhdGUvZmY0YmQ3OTQtMDFlYi00YTVhLThlMTYtYzhkMzE1MTg0NWRhJ1xuICAgICAgfVxuICAgIH0sXG4gICAgZG9tYWluOiB7XG4gICAgICBkb21haW5OYW1lOiAnYXBpLmgtby5kZXYnLFxuICAgICAgem9uZU5hbWU6ICdhcGkuaC1vLmRldi4nLFxuICAgICAgaG9zdGVkWm9uZUlkOiAnWjA4NzA5MzIzNkQ2N1VYSzI2SEcnLFxuICAgICAgY2VydGlmaWNhdGVBcm46ICdhcm46YXdzOmFjbTpldS13ZXN0LTI6OTgxMjM3MTkzMjg4OmNlcnRpZmljYXRlLzE4NjcxMDMwLTc1M2QtNDA0Ny04ZTI2LTc2Nzk0YjY5ZmE3YidcbiAgICB9XG4gIH0pO1xuXG5uZXcgQWxmSW5zdGFuY2VzU3RhY2soYXBwLCBcIkFsZkluc3RhbmNlc1N0YWNrRXVXZXN0MlwiLCB7XG4gIGVudmlyb25tZW50OiAnZGV2JyxcbiAgZW52OiB7XG4gICAgcmVnaW9uOiAnZXUtd2VzdC0yJyxcbiAgICBhY2NvdW50OiAnNjA5ODQxMTgyNTMyJ1xuICB9LFxuICBjcmVhdGVJbnN0YW5jZXM6IHtcbiAgICBpbWFnZUlkOiAnYW1pLTBjYjc5MDMwOGY3NTkxZmE2J1xuICB9LFxuICAvLyBjb2duaXRvXG4gIHN3YWdnZXI6IHtcbiAgICBmaWxlOiAndG1wL3N3YWdnZXJfZnVsbC55YW1sJyxcbiAgICAvLyBkb21haW46ICdoLW8uZGV2JyxcbiAgICAvLyBzdWJkb21haW46ICdhcGktZXhwbG9yZXInLFxuICAgIC8vIGNlcnRpZmljYXRlQXJuOiAnYXJuOmF3czphY206dXMtZWFzdC0xOjYwOTg0MTE4MjUzMjpjZXJ0aWZpY2F0ZS9mMjk5Yjc1Yi1mMjJjLTQwNGQtOThmMi04OTUyOWY0ZDJjOTYnXG4gIH0sXG4gIC8vIGRvbWFpbjoge1xuICAvLyAgIGRvbWFpbk5hbWU6ICdhcGkuaC1vLmRldicsXG4gIC8vICAgem9uZU5hbWU6ICdhcGkuaC1vLmRldi4nLFxuICAvLyAgIGhvc3RlZFpvbmVJZDogJ1owMTQ4NjUyMVo4MTNFTVNLTldOSCcsXG4gIC8vICAgY2VydGlmaWNhdGVBcm46ICdhcm46YXdzOmFjbTpldS13ZXN0LTI6NjA5ODQxMTgyNTMyOmNlcnRpZmljYXRlLzg2MTZlNGUzLTg1NzAtNDJkYi05Y2JkLTZlNmU3NmRhM2M1ZidcbiAgLy8gfVxufSk7XG5cbmFwcC5zeW50aCgpO1xuIl19