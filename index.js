"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const logs = require("@aws-cdk/aws-logs");
const AlfCdkRestApi_1 = require("./AlfCdkRestApi");
const AlfCdkTables_1 = require("./lib/AlfCdkTables");
const AlfCdkLambdas_1 = require("./lib/AlfCdkLambdas");
const AlfCdkStepFunctions_1 = require("./lib/AlfCdkStepFunctions");
class AlfInstancesStack extends core_1.Stack {
    constructor(app, id, props) {
        super(app, id, props);
        const lambdas = new AlfCdkLambdas_1.AlfCdkLambdas(this, props);
        new AlfCdkTables_1.AlfCdkTables(this, lambdas);
        new AlfCdkRestApi_1.AlfCdkRestApi(this, lambdas, props);
        const stepFunctions = new AlfCdkStepFunctions_1.AlfCdkStepFunctions(this, lambdas);
        lambdas.createOneApi.addEnvironment('STATE_MACHINE_ARN', stepFunctions.createStateMachine.stateMachineArn);
        lambdas.updateOneApi.addEnvironment('STATE_MACHINE_ARN', stepFunctions.updateStateMachine.stateMachineArn);
        // Configure log group for short retention
        const logGroup = new logs.LogGroup(this, 'LogGroup', {
            retention: logs.RetentionDays.ONE_DAY,
            removalPolicy: core_1.RemovalPolicy.DESTROY,
            logGroupName: '/aws/lambda/custom/' + this.stackName
        });
        const lgstream = logGroup.addStream('myloggroupStream');
        new core_1.CfnOutput(this, 'LogGroupName', {
            value: logGroup.logGroupName
        });
        new core_1.CfnOutput(this, 'LogGroupStreamName', {
            value: lgstream.logStreamName
        });
    }
}
exports.AlfInstancesStack = AlfInstancesStack;
const app = new core_1.App();
new AlfInstancesStack(app, "AlfInstancesStackEuWest2Prod", {
    environment: 'prod',
    env: {
        region: "eu-west-2",
        account: '981237193288'
    },
    // disable create ec2 instance
    // createInstances: {
    //   imageId: 'ami-04d5cc9b88f9d1d39'
    // },
    auth: {
        cognito: {
            userPoolArn: 'arn:aws:cognito-idp:eu-west-2:981237193288:userpool/eu-west-2_9BVmRPfz1'
        }
    },
    swagger: {
        file: 'tmp/swagger_full_.yaml',
        domain: {
            domainName: 'h-o.dev',
            subdomain: 'api-explorer',
            certificateArn: 'arn:aws:acm:us-east-1:981237193288:certificate/ff4bd794-01eb-4a5a-8e16-c8d3151845da'
        }
    },
    domain: {
        domainName: 'api.h-o.dev',
        zoneName: 'api.h-o.dev.',
        hostedZoneId: 'Z087093236D67UXK26HG',
        certificateArn: 'arn:aws:acm:eu-west-2:981237193288:certificate/18671030-753d-4047-8e26-76794b69fa7b'
    }
});
new AlfInstancesStack(app, "AlfInstancesStackEuWest2", {
    environment: 'dev',
    env: {
        region: 'eu-west-2',
        account: '609841182532'
    },
    auth: {
        mockAuth: {
            userName: true
        }
    },
    createInstances: {
        imageId: 'ami-0cb790308f7591fa6'
    },
    // cognito
    swagger: {
        file: 'tmp/swagger_full.yaml',
    },
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUFpRjtBQUNqRiwwQ0FBMkM7QUFDM0MsbURBQXdEO0FBQ3hELHFEQUFrRDtBQUNsRCx1REFBb0Q7QUFDcEQsbUVBQWdFO0FBNkJoRSxNQUFhLGlCQUFrQixTQUFRLFlBQUs7SUFDMUMsWUFBWSxHQUFRLEVBQUUsRUFBVSxFQUFFLEtBQThCO1FBQzlELEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXRCLE1BQU0sT0FBTyxHQUFHLElBQUksNkJBQWEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFL0MsSUFBSSwyQkFBWSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUVoQyxJQUFJLDZCQUFhLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QyxNQUFNLGFBQWEsR0FBRyxJQUFJLHlDQUFtQixDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUU3RCxPQUFPLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxtQkFBbUIsRUFBRSxhQUFhLENBQUMsa0JBQWtCLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDM0csT0FBTyxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsbUJBQW1CLEVBQUUsYUFBYSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxDQUFBO1FBRTFHLDBDQUEwQztRQUMxQyxNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUNuRCxTQUFTLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPO1lBQ3JDLGFBQWEsRUFBRSxvQkFBYSxDQUFDLE9BQU87WUFDcEMsWUFBWSxFQUFFLHFCQUFxQixHQUFHLElBQUksQ0FBQyxTQUFTO1NBQ3JELENBQUMsQ0FBQztRQUVILE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtRQUV2RCxJQUFJLGdCQUFTLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUNsQyxLQUFLLEVBQUUsUUFBUSxDQUFDLFlBQVk7U0FDN0IsQ0FBQyxDQUFDO1FBRUgsSUFBSSxnQkFBUyxDQUFDLElBQUksRUFBRSxvQkFBb0IsRUFBRTtZQUN4QyxLQUFLLEVBQUUsUUFBUSxDQUFDLGFBQWE7U0FDOUIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBaENELDhDQWdDQztBQUVELE1BQU0sR0FBRyxHQUFHLElBQUksVUFBRyxFQUFFLENBQUM7QUFFdEIsSUFBSSxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsOEJBQThCLEVBQUU7SUFDdkQsV0FBVyxFQUFFLE1BQU07SUFDbkIsR0FBRyxFQUFFO1FBQ0gsTUFBTSxFQUFFLFdBQVc7UUFDbkIsT0FBTyxFQUFFLGNBQWM7S0FDeEI7SUFDRCw4QkFBOEI7SUFDOUIscUJBQXFCO0lBQ3JCLHFDQUFxQztJQUNyQyxLQUFLO0lBQ0wsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFO1lBQ1AsV0FBVyxFQUFFLHlFQUF5RTtTQUN2RjtLQUNGO0lBQ0QsT0FBTyxFQUFFO1FBQ1AsSUFBSSxFQUFFLHdCQUF3QjtRQUM5QixNQUFNLEVBQUU7WUFDTixVQUFVLEVBQUUsU0FBUztZQUNyQixTQUFTLEVBQUUsY0FBYztZQUN6QixjQUFjLEVBQUUscUZBQXFGO1NBQ3RHO0tBQ0Y7SUFDRCxNQUFNLEVBQUU7UUFDTixVQUFVLEVBQUUsYUFBYTtRQUN6QixRQUFRLEVBQUUsY0FBYztRQUN4QixZQUFZLEVBQUUsc0JBQXNCO1FBQ3BDLGNBQWMsRUFBRSxxRkFBcUY7S0FDdEc7Q0FDRixDQUFDLENBQUM7QUFFTCxJQUFJLGlCQUFpQixDQUFDLEdBQUcsRUFBRSwwQkFBMEIsRUFBRTtJQUNyRCxXQUFXLEVBQUUsS0FBSztJQUNsQixHQUFHLEVBQUU7UUFDSCxNQUFNLEVBQUUsV0FBVztRQUNuQixPQUFPLEVBQUUsY0FBYztLQUN4QjtJQUNELElBQUksRUFBRTtRQUNKLFFBQVEsRUFBRTtZQUNSLFFBQVEsRUFBRSxJQUFJO1NBQ2Y7S0FDRjtJQUNELGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSx1QkFBdUI7S0FDakM7SUFDRCxVQUFVO0lBQ1YsT0FBTyxFQUFFO1FBQ1AsSUFBSSxFQUFFLHVCQUF1QjtLQUk5QjtDQU9GLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YWNrUHJvcHMsIFN0YWNrLCBBcHAsIFJlbW92YWxQb2xpY3ksIENmbk91dHB1dCB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0IGxvZ3MgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtbG9ncycpO1xuaW1wb3J0IHsgQWxmQ2RrUmVzdEFwaSwgRG9tYWluIH0gZnJvbSAnLi9BbGZDZGtSZXN0QXBpJztcbmltcG9ydCB7IEFsZkNka1RhYmxlcyB9IGZyb20gJy4vbGliL0FsZkNka1RhYmxlcyc7XG5pbXBvcnQgeyBBbGZDZGtMYW1iZGFzIH0gZnJvbSAnLi9saWIvQWxmQ2RrTGFtYmRhcyc7XG5pbXBvcnQgeyBBbGZDZGtTdGVwRnVuY3Rpb25zIH0gZnJvbSAnLi9saWIvQWxmQ2RrU3RlcEZ1bmN0aW9ucyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWxmSW5zdGFuY2VzU3RhY2tQcm9wcyBleHRlbmRzIFN0YWNrUHJvcHMge1xuICAvKipcbiAgICogaWYgdW5kZWZpbmVkIG5vIGVjMiBpbnN0YW5jZXMgd2lsbCBiZSBjcmVhdGVkXG4gICAqL1xuICBjcmVhdGVJbnN0YW5jZXM/OiB7XG4gICAgaW1hZ2VJZDogc3RyaW5nXG4gIH0sXG4gIHN3YWdnZXI/OiB7XG4gICAgZmlsZTogc3RyaW5nLFxuICAgIGRvbWFpbj86IHtcbiAgICAgIGRvbWFpbk5hbWU6IHN0cmluZyxcbiAgICAgIHN1YmRvbWFpbjogc3RyaW5nLFxuICAgICAgY2VydGlmaWNhdGVBcm46IHN0cmluZ1xuICAgIH1cbiAgfVxuICBhdXRoPzoge1xuICAgIG1vY2tBdXRoPzoge1xuICAgICAgdXNlck5hbWU/OiBCb29sZWFuXG4gICAgfSxcbiAgICBjb2duaXRvPzoge1xuICAgICAgdXNlclBvb2xBcm4/OiBzdHJpbmdcbiAgICB9LFxuICB9XG4gIGVudmlyb25tZW50OiBzdHJpbmdcbiAgZG9tYWluPzogRG9tYWluXG59XG5cbmV4cG9ydCBjbGFzcyBBbGZJbnN0YW5jZXNTdGFjayBleHRlbmRzIFN0YWNrIHtcbiAgY29uc3RydWN0b3IoYXBwOiBBcHAsIGlkOiBzdHJpbmcsIHByb3BzPzogQWxmSW5zdGFuY2VzU3RhY2tQcm9wcykge1xuICAgIHN1cGVyKGFwcCwgaWQsIHByb3BzKTtcblxuICAgIGNvbnN0IGxhbWJkYXMgPSBuZXcgQWxmQ2RrTGFtYmRhcyh0aGlzLCBwcm9wcyk7XG5cbiAgICBuZXcgQWxmQ2RrVGFibGVzKHRoaXMsIGxhbWJkYXMpO1xuXG4gICAgbmV3IEFsZkNka1Jlc3RBcGkodGhpcywgbGFtYmRhcywgcHJvcHMpO1xuXG4gICAgY29uc3Qgc3RlcEZ1bmN0aW9ucyA9IG5ldyBBbGZDZGtTdGVwRnVuY3Rpb25zKHRoaXMsIGxhbWJkYXMpO1xuXG4gICAgbGFtYmRhcy5jcmVhdGVPbmVBcGkuYWRkRW52aXJvbm1lbnQoJ1NUQVRFX01BQ0hJTkVfQVJOJywgc3RlcEZ1bmN0aW9ucy5jcmVhdGVTdGF0ZU1hY2hpbmUuc3RhdGVNYWNoaW5lQXJuKTtcbiAgICBsYW1iZGFzLnVwZGF0ZU9uZUFwaS5hZGRFbnZpcm9ubWVudCgnU1RBVEVfTUFDSElORV9BUk4nLCBzdGVwRnVuY3Rpb25zLnVwZGF0ZVN0YXRlTWFjaGluZS5zdGF0ZU1hY2hpbmVBcm4pXG5cbiAgICAvLyBDb25maWd1cmUgbG9nIGdyb3VwIGZvciBzaG9ydCByZXRlbnRpb25cbiAgICBjb25zdCBsb2dHcm91cCA9IG5ldyBsb2dzLkxvZ0dyb3VwKHRoaXMsICdMb2dHcm91cCcsIHtcbiAgICAgIHJldGVudGlvbjogbG9ncy5SZXRlbnRpb25EYXlzLk9ORV9EQVksXG4gICAgICByZW1vdmFsUG9saWN5OiBSZW1vdmFsUG9saWN5LkRFU1RST1ksXG4gICAgICBsb2dHcm91cE5hbWU6ICcvYXdzL2xhbWJkYS9jdXN0b20vJyArIHRoaXMuc3RhY2tOYW1lXG4gICAgfSk7XG5cbiAgICBjb25zdCBsZ3N0cmVhbSA9IGxvZ0dyb3VwLmFkZFN0cmVhbSgnbXlsb2dncm91cFN0cmVhbScpXG5cbiAgICBuZXcgQ2ZuT3V0cHV0KHRoaXMsICdMb2dHcm91cE5hbWUnLCB7XG4gICAgICB2YWx1ZTogbG9nR3JvdXAubG9nR3JvdXBOYW1lXG4gICAgfSk7XG5cbiAgICBuZXcgQ2ZuT3V0cHV0KHRoaXMsICdMb2dHcm91cFN0cmVhbU5hbWUnLCB7XG4gICAgICB2YWx1ZTogbGdzdHJlYW0ubG9nU3RyZWFtTmFtZVxuICAgIH0pO1xuICB9XG59XG5cbmNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcblxubmV3IEFsZkluc3RhbmNlc1N0YWNrKGFwcCwgXCJBbGZJbnN0YW5jZXNTdGFja0V1V2VzdDJQcm9kXCIsIHtcbiAgICBlbnZpcm9ubWVudDogJ3Byb2QnLFxuICAgIGVudjoge1xuICAgICAgcmVnaW9uOiBcImV1LXdlc3QtMlwiLFxuICAgICAgYWNjb3VudDogJzk4MTIzNzE5MzI4OCdcbiAgICB9LFxuICAgIC8vIGRpc2FibGUgY3JlYXRlIGVjMiBpbnN0YW5jZVxuICAgIC8vIGNyZWF0ZUluc3RhbmNlczoge1xuICAgIC8vICAgaW1hZ2VJZDogJ2FtaS0wNGQ1Y2M5Yjg4ZjlkMWQzOSdcbiAgICAvLyB9LFxuICAgIGF1dGg6IHtcbiAgICAgIGNvZ25pdG86IHtcbiAgICAgICAgdXNlclBvb2xBcm46ICdhcm46YXdzOmNvZ25pdG8taWRwOmV1LXdlc3QtMjo5ODEyMzcxOTMyODg6dXNlcnBvb2wvZXUtd2VzdC0yXzlCVm1SUGZ6MSdcbiAgICAgIH1cbiAgICB9LFxuICAgIHN3YWdnZXI6IHtcbiAgICAgIGZpbGU6ICd0bXAvc3dhZ2dlcl9mdWxsXy55YW1sJyxcbiAgICAgIGRvbWFpbjoge1xuICAgICAgICBkb21haW5OYW1lOiAnaC1vLmRldicsXG4gICAgICAgIHN1YmRvbWFpbjogJ2FwaS1leHBsb3JlcicsXG4gICAgICAgIGNlcnRpZmljYXRlQXJuOiAnYXJuOmF3czphY206dXMtZWFzdC0xOjk4MTIzNzE5MzI4ODpjZXJ0aWZpY2F0ZS9mZjRiZDc5NC0wMWViLTRhNWEtOGUxNi1jOGQzMTUxODQ1ZGEnXG4gICAgICB9XG4gICAgfSxcbiAgICBkb21haW46IHtcbiAgICAgIGRvbWFpbk5hbWU6ICdhcGkuaC1vLmRldicsXG4gICAgICB6b25lTmFtZTogJ2FwaS5oLW8uZGV2LicsXG4gICAgICBob3N0ZWRab25lSWQ6ICdaMDg3MDkzMjM2RDY3VVhLMjZIRycsXG4gICAgICBjZXJ0aWZpY2F0ZUFybjogJ2Fybjphd3M6YWNtOmV1LXdlc3QtMjo5ODEyMzcxOTMyODg6Y2VydGlmaWNhdGUvMTg2NzEwMzAtNzUzZC00MDQ3LThlMjYtNzY3OTRiNjlmYTdiJ1xuICAgIH1cbiAgfSk7XG5cbm5ldyBBbGZJbnN0YW5jZXNTdGFjayhhcHAsIFwiQWxmSW5zdGFuY2VzU3RhY2tFdVdlc3QyXCIsIHtcbiAgZW52aXJvbm1lbnQ6ICdkZXYnLFxuICBlbnY6IHtcbiAgICByZWdpb246ICdldS13ZXN0LTInLFxuICAgIGFjY291bnQ6ICc2MDk4NDExODI1MzInXG4gIH0sXG4gIGF1dGg6IHtcbiAgICBtb2NrQXV0aDoge1xuICAgICAgdXNlck5hbWU6IHRydWVcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZUluc3RhbmNlczoge1xuICAgIGltYWdlSWQ6ICdhbWktMGNiNzkwMzA4Zjc1OTFmYTYnXG4gIH0sXG4gIC8vIGNvZ25pdG9cbiAgc3dhZ2dlcjoge1xuICAgIGZpbGU6ICd0bXAvc3dhZ2dlcl9mdWxsLnlhbWwnLFxuICAgIC8vIGRvbWFpbjogJ2gtby5kZXYnLFxuICAgIC8vIHN1YmRvbWFpbjogJ2FwaS1leHBsb3JlcicsXG4gICAgLy8gY2VydGlmaWNhdGVBcm46ICdhcm46YXdzOmFjbTp1cy1lYXN0LTE6NjA5ODQxMTgyNTMyOmNlcnRpZmljYXRlL2YyOTliNzViLWYyMmMtNDA0ZC05OGYyLTg5NTI5ZjRkMmM5NidcbiAgfSxcbiAgLy8gZG9tYWluOiB7XG4gIC8vICAgZG9tYWluTmFtZTogJ2FwaS5oLW8uZGV2JyxcbiAgLy8gICB6b25lTmFtZTogJ2FwaS5oLW8uZGV2LicsXG4gIC8vICAgaG9zdGVkWm9uZUlkOiAnWjAxNDg2NTIxWjgxM0VNU0tOV05IJyxcbiAgLy8gICBjZXJ0aWZpY2F0ZUFybjogJ2Fybjphd3M6YWNtOmV1LXdlc3QtMjo2MDk4NDExODI1MzI6Y2VydGlmaWNhdGUvODYxNmU0ZTMtODU3MC00MmRiLTljYmQtNmU2ZTc2ZGEzYzVmJ1xuICAvLyB9XG59KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=