"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const logs = require("@aws-cdk/aws-logs");
const AlfCdkRestApi_1 = require("./AlfCdkRestApi");
const AlfCdkTables_1 = require("./lib/AlfCdkTables");
const AlfCdkLambdas_1 = require("./lib/AlfCdkLambdas");
const AlfCdkStepFunctions_1 = require("./lib/AlfCdkStepFunctions");
class AlfInstancesStack extends core_1.Stack {
    constructor(app, id, props) {
        super(app, id, props);
        const lambdas = new AlfCdkLambdas_1.AlfCdkLambdas(this, props);
        new AlfCdkTables_1.AlfCdkTables(this, lambdas);
        new AlfCdkRestApi_1.AlfCdkRestApi(this, lambdas, props);
        const stepFunctions = new AlfCdkStepFunctions_1.AlfCdkStepFunctions(this, lambdas);
        lambdas.createOneApi.addEnvironment('STATE_MACHINE_ARN', stepFunctions.createStateMachine.stateMachineArn);
        lambdas.updateOneApi.addEnvironment('STATE_MACHINE_ARN', stepFunctions.updateStateMachine.stateMachineArn);
        // Configure log group for short retention
        const logGroup = new logs.LogGroup(this, 'LogGroup', {
            retention: logs.RetentionDays.ONE_DAY,
            removalPolicy: core_1.RemovalPolicy.DESTROY,
            logGroupName: '/aws/lambda/custom/' + this.stackName
        });
        const lgstream = logGroup.addStream('myloggroupStream');
        new core_1.CfnOutput(this, 'LogGroupName', {
            value: logGroup.logGroupName
        });
        new core_1.CfnOutput(this, 'LogGroupStreamName', {
            value: lgstream.logStreamName
        });
    }
}
exports.AlfInstancesStack = AlfInstancesStack;
const app = new core_1.App();
new AlfInstancesStack(app, "AlfInstancesStackEuWest2Prod", {
    environment: 'prod',
    env: {
        region: "eu-west-2",
        account: '981237193288'
    },
    // disable create ec2 instance
    // createInstances: {
    //   imageId: 'ami-04d5cc9b88f9d1d39'
    // },
    swagger: {
        file: 'tmp/swagger_full_.yaml',
        domain: {
            domainName: 'h-o.dev',
            subdomain: 'api-explorer',
            certificateArn: 'arn:aws:acm:us-east-1:981237193288:certificate/ff4bd794-01eb-4a5a-8e16-c8d3151845da'
        }
    },
    domain: {
        domainName: 'api.h-o.dev',
        zoneName: 'api.h-o.dev.',
        hostedZoneId: 'Z01486521Z813EMSKNWNH',
        certificateArn: 'arn:aws:acm:eu-west-2:981237193288:certificate/18671030-753d-4047-8e26-76794b69fa7b'
    }
});
new AlfInstancesStack(app, "AlfInstancesStackEuWest2", {
    environment: 'dev',
    env: {
        region: 'eu-west-2',
        account: '609841182532'
    },
    createInstances: {
        imageId: 'ami-0cb790308f7591fa6'
    },
    swagger: {
        file: 'tmp/swagger_full.yaml',
    },
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUFpRjtBQUNqRiwwQ0FBMkM7QUFDM0MsbURBQXdEO0FBQ3hELHFEQUFrRDtBQUNsRCx1REFBb0Q7QUFDcEQsbUVBQWdFO0FBc0JoRSxNQUFhLGlCQUFrQixTQUFRLFlBQUs7SUFDMUMsWUFBWSxHQUFRLEVBQUUsRUFBVSxFQUFFLEtBQThCO1FBQzlELEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXRCLE1BQU0sT0FBTyxHQUFHLElBQUksNkJBQWEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFL0MsSUFBSSwyQkFBWSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUVoQyxJQUFJLDZCQUFhLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QyxNQUFNLGFBQWEsR0FBRyxJQUFJLHlDQUFtQixDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUU3RCxPQUFPLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxtQkFBbUIsRUFBRSxhQUFhLENBQUMsa0JBQWtCLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDM0csT0FBTyxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsbUJBQW1CLEVBQUUsYUFBYSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxDQUFBO1FBRTFHLDBDQUEwQztRQUMxQyxNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUNuRCxTQUFTLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPO1lBQ3JDLGFBQWEsRUFBRSxvQkFBYSxDQUFDLE9BQU87WUFDcEMsWUFBWSxFQUFFLHFCQUFxQixHQUFHLElBQUksQ0FBQyxTQUFTO1NBQ3JELENBQUMsQ0FBQztRQUVILE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtRQUV2RCxJQUFJLGdCQUFTLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUNsQyxLQUFLLEVBQUUsUUFBUSxDQUFDLFlBQVk7U0FDN0IsQ0FBQyxDQUFDO1FBRUgsSUFBSSxnQkFBUyxDQUFDLElBQUksRUFBRSxvQkFBb0IsRUFBRTtZQUN4QyxLQUFLLEVBQUUsUUFBUSxDQUFDLGFBQWE7U0FDOUIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBaENELDhDQWdDQztBQUVELE1BQU0sR0FBRyxHQUFHLElBQUksVUFBRyxFQUFFLENBQUM7QUFFdEIsSUFBSSxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsOEJBQThCLEVBQUU7SUFDdkQsV0FBVyxFQUFFLE1BQU07SUFDbkIsR0FBRyxFQUFFO1FBQ0gsTUFBTSxFQUFFLFdBQVc7UUFDbkIsT0FBTyxFQUFFLGNBQWM7S0FDeEI7SUFDRCw4QkFBOEI7SUFDOUIscUJBQXFCO0lBQ3JCLHFDQUFxQztJQUNyQyxLQUFLO0lBQ0wsT0FBTyxFQUFFO1FBQ1AsSUFBSSxFQUFFLHdCQUF3QjtRQUM5QixNQUFNLEVBQUU7WUFDTixVQUFVLEVBQUUsU0FBUztZQUNyQixTQUFTLEVBQUUsY0FBYztZQUN6QixjQUFjLEVBQUUscUZBQXFGO1NBQ3RHO0tBQ0Y7SUFDRCxNQUFNLEVBQUU7UUFDTixVQUFVLEVBQUUsYUFBYTtRQUN6QixRQUFRLEVBQUUsY0FBYztRQUN4QixZQUFZLEVBQUUsdUJBQXVCO1FBQ3JDLGNBQWMsRUFBRSxxRkFBcUY7S0FDdEc7Q0FDRixDQUFDLENBQUM7QUFFTCxJQUFJLGlCQUFpQixDQUFDLEdBQUcsRUFBRSwwQkFBMEIsRUFBRTtJQUNyRCxXQUFXLEVBQUUsS0FBSztJQUNsQixHQUFHLEVBQUU7UUFDSCxNQUFNLEVBQUUsV0FBVztRQUNuQixPQUFPLEVBQUUsY0FBYztLQUN4QjtJQUNELGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSx1QkFBdUI7S0FDakM7SUFDRCxPQUFPLEVBQUU7UUFDUCxJQUFJLEVBQUUsdUJBQXVCO0tBSTlCO0NBT0YsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhY2tQcm9wcywgU3RhY2ssIEFwcCwgUmVtb3ZhbFBvbGljeSwgQ2ZuT3V0cHV0IH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgbG9ncyA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1sb2dzJyk7XG5pbXBvcnQgeyBBbGZDZGtSZXN0QXBpLCBEb21haW4gfSBmcm9tICcuL0FsZkNka1Jlc3RBcGknO1xuaW1wb3J0IHsgQWxmQ2RrVGFibGVzIH0gZnJvbSAnLi9saWIvQWxmQ2RrVGFibGVzJztcbmltcG9ydCB7IEFsZkNka0xhbWJkYXMgfSBmcm9tICcuL2xpYi9BbGZDZGtMYW1iZGFzJztcbmltcG9ydCB7IEFsZkNka1N0ZXBGdW5jdGlvbnMgfSBmcm9tICcuL2xpYi9BbGZDZGtTdGVwRnVuY3Rpb25zJztcblxuZXhwb3J0IGludGVyZmFjZSBBbGZJbnN0YW5jZXNTdGFja1Byb3BzIGV4dGVuZHMgU3RhY2tQcm9wcyB7XG4gIC8qKlxuICAgKiBpZiB1bmRlZmluZWQgbm8gZWMyIGluc3RhbmNlcyB3aWxsIGJlIGNyZWF0ZWRcbiAgICovXG4gIGNyZWF0ZUluc3RhbmNlcz86IHtcbiAgICBpbWFnZUlkOiBzdHJpbmdcbiAgfSxcbiAgc3dhZ2dlcj86IHtcbiAgICBmaWxlOiBzdHJpbmcsXG4gICAgZG9tYWluPzoge1xuICAgICAgZG9tYWluTmFtZTogc3RyaW5nLFxuICAgICAgc3ViZG9tYWluOiBzdHJpbmcsXG4gICAgICBjZXJ0aWZpY2F0ZUFybjogc3RyaW5nXG4gICAgfVxuICB9XG4gIC8vIHN3YWdnZXJGaWxlPzogc3RyaW5nLFxuICBlbnZpcm9ubWVudDogc3RyaW5nXG4gIGRvbWFpbj86IERvbWFpblxufVxuXG5leHBvcnQgY2xhc3MgQWxmSW5zdGFuY2VzU3RhY2sgZXh0ZW5kcyBTdGFjayB7XG4gIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBpZDogc3RyaW5nLCBwcm9wcz86IEFsZkluc3RhbmNlc1N0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihhcHAsIGlkLCBwcm9wcyk7XG5cbiAgICBjb25zdCBsYW1iZGFzID0gbmV3IEFsZkNka0xhbWJkYXModGhpcywgcHJvcHMpO1xuXG4gICAgbmV3IEFsZkNka1RhYmxlcyh0aGlzLCBsYW1iZGFzKTtcblxuICAgIG5ldyBBbGZDZGtSZXN0QXBpKHRoaXMsIGxhbWJkYXMsIHByb3BzKTtcblxuICAgIGNvbnN0IHN0ZXBGdW5jdGlvbnMgPSBuZXcgQWxmQ2RrU3RlcEZ1bmN0aW9ucyh0aGlzLCBsYW1iZGFzKTtcblxuICAgIGxhbWJkYXMuY3JlYXRlT25lQXBpLmFkZEVudmlyb25tZW50KCdTVEFURV9NQUNISU5FX0FSTicsIHN0ZXBGdW5jdGlvbnMuY3JlYXRlU3RhdGVNYWNoaW5lLnN0YXRlTWFjaGluZUFybik7XG4gICAgbGFtYmRhcy51cGRhdGVPbmVBcGkuYWRkRW52aXJvbm1lbnQoJ1NUQVRFX01BQ0hJTkVfQVJOJywgc3RlcEZ1bmN0aW9ucy51cGRhdGVTdGF0ZU1hY2hpbmUuc3RhdGVNYWNoaW5lQXJuKVxuXG4gICAgLy8gQ29uZmlndXJlIGxvZyBncm91cCBmb3Igc2hvcnQgcmV0ZW50aW9uXG4gICAgY29uc3QgbG9nR3JvdXAgPSBuZXcgbG9ncy5Mb2dHcm91cCh0aGlzLCAnTG9nR3JvdXAnLCB7XG4gICAgICByZXRlbnRpb246IGxvZ3MuUmV0ZW50aW9uRGF5cy5PTkVfREFZLFxuICAgICAgcmVtb3ZhbFBvbGljeTogUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLFxuICAgICAgbG9nR3JvdXBOYW1lOiAnL2F3cy9sYW1iZGEvY3VzdG9tLycgKyB0aGlzLnN0YWNrTmFtZVxuICAgIH0pO1xuXG4gICAgY29uc3QgbGdzdHJlYW0gPSBsb2dHcm91cC5hZGRTdHJlYW0oJ215bG9nZ3JvdXBTdHJlYW0nKVxuXG4gICAgbmV3IENmbk91dHB1dCh0aGlzLCAnTG9nR3JvdXBOYW1lJywge1xuICAgICAgdmFsdWU6IGxvZ0dyb3VwLmxvZ0dyb3VwTmFtZVxuICAgIH0pO1xuXG4gICAgbmV3IENmbk91dHB1dCh0aGlzLCAnTG9nR3JvdXBTdHJlYW1OYW1lJywge1xuICAgICAgdmFsdWU6IGxnc3RyZWFtLmxvZ1N0cmVhbU5hbWVcbiAgICB9KTtcbiAgfVxufVxuXG5jb25zdCBhcHAgPSBuZXcgQXBwKCk7XG5cbm5ldyBBbGZJbnN0YW5jZXNTdGFjayhhcHAsIFwiQWxmSW5zdGFuY2VzU3RhY2tFdVdlc3QyUHJvZFwiLCB7XG4gICAgZW52aXJvbm1lbnQ6ICdwcm9kJyxcbiAgICBlbnY6IHtcbiAgICAgIHJlZ2lvbjogXCJldS13ZXN0LTJcIixcbiAgICAgIGFjY291bnQ6ICc5ODEyMzcxOTMyODgnXG4gICAgfSxcbiAgICAvLyBkaXNhYmxlIGNyZWF0ZSBlYzIgaW5zdGFuY2VcbiAgICAvLyBjcmVhdGVJbnN0YW5jZXM6IHtcbiAgICAvLyAgIGltYWdlSWQ6ICdhbWktMDRkNWNjOWI4OGY5ZDFkMzknXG4gICAgLy8gfSxcbiAgICBzd2FnZ2VyOiB7XG4gICAgICBmaWxlOiAndG1wL3N3YWdnZXJfZnVsbF8ueWFtbCcsXG4gICAgICBkb21haW46IHtcbiAgICAgICAgZG9tYWluTmFtZTogJ2gtby5kZXYnLFxuICAgICAgICBzdWJkb21haW46ICdhcGktZXhwbG9yZXInLFxuICAgICAgICBjZXJ0aWZpY2F0ZUFybjogJ2Fybjphd3M6YWNtOnVzLWVhc3QtMTo5ODEyMzcxOTMyODg6Y2VydGlmaWNhdGUvZmY0YmQ3OTQtMDFlYi00YTVhLThlMTYtYzhkMzE1MTg0NWRhJ1xuICAgICAgfVxuICAgIH0sXG4gICAgZG9tYWluOiB7XG4gICAgICBkb21haW5OYW1lOiAnYXBpLmgtby5kZXYnLFxuICAgICAgem9uZU5hbWU6ICdhcGkuaC1vLmRldi4nLFxuICAgICAgaG9zdGVkWm9uZUlkOiAnWjAxNDg2NTIxWjgxM0VNU0tOV05IJyxcbiAgICAgIGNlcnRpZmljYXRlQXJuOiAnYXJuOmF3czphY206ZXUtd2VzdC0yOjk4MTIzNzE5MzI4ODpjZXJ0aWZpY2F0ZS8xODY3MTAzMC03NTNkLTQwNDctOGUyNi03Njc5NGI2OWZhN2InXG4gICAgfVxuICB9KTtcblxubmV3IEFsZkluc3RhbmNlc1N0YWNrKGFwcCwgXCJBbGZJbnN0YW5jZXNTdGFja0V1V2VzdDJcIiwge1xuICBlbnZpcm9ubWVudDogJ2RldicsXG4gIGVudjoge1xuICAgIHJlZ2lvbjogJ2V1LXdlc3QtMicsXG4gICAgYWNjb3VudDogJzYwOTg0MTE4MjUzMidcbiAgfSxcbiAgY3JlYXRlSW5zdGFuY2VzOiB7XG4gICAgaW1hZ2VJZDogJ2FtaS0wY2I3OTAzMDhmNzU5MWZhNidcbiAgfSxcbiAgc3dhZ2dlcjoge1xuICAgIGZpbGU6ICd0bXAvc3dhZ2dlcl9mdWxsLnlhbWwnLFxuICAgIC8vIGRvbWFpbjogJ2gtby5kZXYnLFxuICAgIC8vIHN1YmRvbWFpbjogJ2FwaS1leHBsb3JlcicsXG4gICAgLy8gY2VydGlmaWNhdGVBcm46ICdhcm46YXdzOmFjbTp1cy1lYXN0LTE6NjA5ODQxMTgyNTMyOmNlcnRpZmljYXRlL2YyOTliNzViLWYyMmMtNDA0ZC05OGYyLTg5NTI5ZjRkMmM5NidcbiAgfSxcbiAgLy8gZG9tYWluOiB7XG4gIC8vICAgZG9tYWluTmFtZTogJ2FwaS5oLW8uZGV2JyxcbiAgLy8gICB6b25lTmFtZTogJ2FwaS5oLW8uZGV2LicsXG4gIC8vICAgaG9zdGVkWm9uZUlkOiAnWjAxNDg2NTIxWjgxM0VNU0tOV05IJyxcbiAgLy8gICBjZXJ0aWZpY2F0ZUFybjogJ2Fybjphd3M6YWNtOmV1LXdlc3QtMjo2MDk4NDExODI1MzI6Y2VydGlmaWNhdGUvODYxNmU0ZTMtODU3MC00MmRiLTljYmQtNmU2ZTc2ZGEzYzVmJ1xuICAvLyB9XG59KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=