language: node_js
services: docker
sudo: required
node_js: v12

cache:
  directories:
  - node_modules

before_install:
  - sudo /etc/init.d/postgresql stop
  - sudo python -m pip install awscli
  - npm install -g typescript
  - npm install -g aws-cdk
  - npm install -g wait-on
  - npm install -g node-jq
  - npm install -g merge-yaml-cli
  - mkdir -p ~/.aws
  - aws --profile default configure set aws_access_key_id ${AWS_ACCESS_KEY_ID_D}
  - aws --profile default configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY_D}
  - aws --profile default configure set region eu-west-2
  - aws --profile prod configure set aws_access_key_id ${AWS_ACCESS_KEY_ID_P}
  - aws --profile prod configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY_P}
  - aws --profile prod configure set region eu-west-2

stages:
  - name: Deploy Test
    if: commit_message != one
  - name: Destroy Test Stack
    if: commit_message != one

env:
  destroyBefore: false
  deployTest: false
  deployProd: true
  destroyAfter: false

  deployParent: true
  deployInstance: false

jobs:
  include:
    - stage: Deploy Test
      name: Deploy Instance
      if: env(deployInstance)
      script:
        - STACK_NAME=InstanceStack
        - |
          cd src && npm install && npm run build
          if $? ; then
            travis_terminate 1
          fi
          yes | cdk destroy "$STACK_NAME"
          cdk deploy "$STACK_NAME" --require-approval never
          OUTPUTS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs" --output json )
          for s in $(echo $OUTPUTS | ./node_modules/node-jq/bin/jq -r '.[] | "\(.OutputKey)=\(.OutputValue)"'); do
            echo "exporting $s"
            export $s
          done
          wait-on "http://$InstancePublicDnsName" -t 180000 -i 10000 -v
          wait-on "http://$LoadBalancerDnsName" -t 180000 -i 10000 -v
          if [ $? == 1 ]; then
            echo "Waiting failed -> exit 1"
            exit 1
          fi
          yes | cdk destroy "$STACK_NAME"
    - stage: Deploy Test
      name: Deploy Parent
      if: env(deployParent)
      script:
        # - export WITH_SWAGGER='false' && cdk bootstrap "aws://$AWS_ACCOUNT_NUMBER/$CDK_DEFAULT_REGION"
        - npm install
        - STACK_NAME=AlfInstancesStackEuWest2
        - STACK_NAME_P=AlfInstancesStackEuWest2Prod
        # - npm run build
        - |
          npm run build
          if $? ; then
            travis_terminate 1
          fi
        # - "travis_wait 30 sleep 1800 &"
        - |
          if ${destroyBefore} ; then
            export WITH_SWAGGER='false' && yes | cdk destroy "$STACK_NAME" > /dev/null
            if ${deployProd} ; then
              export WITH_SWAGGER='false' && yes | cdk destroy "$STACK_NAME_P" --profile=prod > /dev/null
            fi
          fi
        # - |
        #   if ! ${deploy} ; then
        #     echo 'abort deploying as deploy == false';
        #     travis_terminate 0
        #   fi
        - export $CI_USER_TOKEN
        # - "travis_wait 30 sleep 1800 &"
        - |
          if ${deployTest} ; then
            export WITH_SWAGGER='false' && yes | cdk deploy "$STACK_NAME" --require-approval never  > /dev/null
          fi
          if ${deployProd} ; then
            export WITH_SWAGGER='false' && yes | cdk deploy "$STACK_NAME_P" --profile=prod --require-approval never  > /dev/null
          fi
        - OUTPUTS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs" --output json )
        - |
          for s in $(echo $OUTPUTS | ./node_modules/node-jq/bin/jq -r '.[] | "\(.OutputKey)=\(.OutputValue)"'); do
            echo "exporting $s"
            export $s
          done
        - OUTPUTS_P=$(aws cloudformation describe-stacks --stack-name $STACK_NAME_P --profile=prod --query "Stacks[0].Outputs" --output json )
        - |
          for s in $(echo $OUTPUTS_P | ./node_modules/node-jq/bin/jq -r '.[] | "\(.OutputKey)_P=\(.OutputValue)"'); do
            echo "exporting $s"
            export $s
          done
        - aws apigateway create-deployment --rest-api-id $RestApiId --stage-name prod
        - aws apigateway create-deployment --rest-api-id $RestApiId_P --stage-name prod --profile prod
        - sleep 20
        - mkdir tmp
        - aws apigateway get-export --parameters '{"extensions":"integrations,authorizers,apigateway"}' --rest-api-id $RestApiId --stage-name prod --export-type oas30 --accepts application/yaml tmp/swagger_neu.yaml
        - aws apigateway get-export --parameters '{"extensions":"integrations,authorizers,apigateway"}' --rest-api-id $RestApiId_P --stage-name prod --profile=prod --export-type oas30 --accepts application/yaml tmp/swagger_neu_.yaml
        - merge-yaml -i tmp/swagger_neu.yaml templates/swagger_validations.yaml -o tmp/swagger_full.yaml
        - merge-yaml -i tmp/swagger_neu_.yaml templates/swagger_validations.yaml -o tmp/swagger_full_.yaml
        - cat tmp/swagger_full.yaml
        # - chmod +x ./createSwagger.sh && ./createSwagger.sh $RestApiId $RestApiId_P
        - npm run build
        # - "travis_wait 30 sleep 1800 &"
        - |
          if ${deployTest} ; then
            export WITH_SWAGGER='true' && yes | cdk deploy "$STACK_NAME" --require-approval never  > /dev/null
          fi
          if ${deployProd} ; then
            export WITH_SWAGGER='true' && yes | cdk deploy "$STACK_NAME_P" --profile=prod --require-approval never  > /dev/null
          fi
          if [ ${deployProd} && ! ${deployTest} ]; then
            travis_terminate 0
          fi
        - aws apigateway create-deployment --rest-api-id $RestApiId --stage-name prod
        - aws apigateway create-deployment --rest-api-id $RestApiId_P --stage-name prod --profile=prod
        - sleep 20
        - newman run test/alf-cdk.postman_collection.json --env-var baseUrl=$RestApiEndPoint -r cli,json --reporter-json-export tmp/newman/report.json --export-environment tmp/newman/env-vars.json --export-globals tmp/newman/global-vars.json
        - echo "Postman Resulted Variables Script " && cat tmp/newman/global-vars.json
        # - SERVER=$(./node_modules/node-jq/bin/jq -r '.values[] | select(.key=="url").value' tmp/newman/global-vars.json)
        - echo "Server = $url"
        # - ./node_modules/wait-on/bin/wait-on "http-get://$url" -t 50000 -i 10000 -v
        # - if [ $? == 1 ]; then
        #     echo "Waiting failed -> exit 1"
        #     exit 1
        #   fi
        - sleep 20
        - aws ec2 terminate-instances --instance-ids $(aws ec2 describe-instances --query 'Reservations[].Instances[].InstanceId' --filters "Name=tag:STACK_NAME,Values=$STACK_NAME" --output text)
        - aws logs get-log-events --log-group-name $LogGroupName --log-stream-name $LogGroupStreamName
    - stage: Destroy Test Stack
      name: Delete stack after test passed
      if: env(destroyAfter)
      script:
        - STACKS=AlfInstancesStackEuWest2
        - |
          npm run build
          export WITH_SWAGGER='false' && yes | cdk destroy "$STACKS"

after_failure:
  # - aws logs get-log-events --log-group-name $LG_NAME --log-stream-name $LG_STREAM_NAME
  # - echo "Postman Resulted Variables Failure" && cat tmp/newman/variables.json
  - cat tmp/newman/report.json
