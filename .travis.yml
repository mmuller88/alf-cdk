language: node_js
services: docker
sudo: required
node_js: v10

cache:
  directories:
  - node_modules

before_install:
  - sudo /etc/init.d/postgresql stop
  - sudo python -m pip install awscli
  - npm install -g typescript
  - npm install -g aws-cdk
  - npm install -g wait-on
  - npm install
  - mkdir -p ~/.aws
  - |
    cat > ~/.aws/credentials << EOL
    [prod]
    aws_access_key_id = ${AWS_ACCESS_KEY_ID_P}
    aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY_P}
    region=eu-west-2
    EOL
  - |
    cat > ~/.aws/config << EOL
    [profile prod]
    aws_access_key_id = ${AWS_ACCESS_KEY_ID_P}
    aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY_P}
    region=eu-west-2
    EOL
    -
  # - export STACK_NAME=AlfInstancesStackEuWest2
  # - REST_API_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='RestApiId'].OutputValue" --output text)

stages:
  - name: Production Stack
    if: commit_message = one
  - name: Deploy Test
    if: commit_message != one
  - name: Destroy Test Stack
    if: commit_message != one

env:
  destroyBefore: true
  deploy: true
  updateProduction: true
  destroyAfter: true

jobs:
  include:
    - stage: Production Stack
      name: Create One Instance
      script:
        # - export CDK_DEFAULT_REGION=eu-west-1
        # - export AWS_DEFAULT_REGION=eu-west-1
        # - export WITH_SWAGGER='false' && cdk bootstrap "aws://$AWS_ACCOUNT_NUMBER/$CDK_DEFAULT_REGION"
        - STACK_NAME=AlfInstancesStackEuWest2Prod
        - OUTPUTS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs" --output json --region eu-west-2 --profile prod )
        - |
          for s in $(echo $OUTPUTS | ./node_modules/node-jq/bin/jq -r '.[] | "\(.OutputKey)=\(.OutputValue)"'); do
            echo "exporting $s"
            export $s
          done
        - "curl --location --request POST \"$RestApiEndPoint/items\" --header 'Content-Type: application/json' --data-raw '{\"alfUserId\": \"demo\", \"shortLived\": false, \"customName\": \"Demo CDK\"}'"
    - stage: Deploy Test
      name: Deploy to AWS Cloud
      script:
        # - export WITH_SWAGGER='false' && cdk bootstrap "aws://$AWS_ACCOUNT_NUMBER/$CDK_DEFAULT_REGION"
        - STACK_NAME=AlfInstancesStackEuWest2
        - STACK_NAME_P=AlfInstancesStackEuWest2Prod
        - npm run build
        - |
          if ${destroyBefore} ; then
            export WITH_SWAGGER='false' && yes | cdk destroy "$STACK_NAME"
            if ${updateProduction} ; then
              export WITH_SWAGGER='false' && yes | cdk destroy "$STACK_NAME_P" --profile=prod
            fi
          fi
        - |
          if ! ${deploy} ; then
            echo 'abort deploying as deploy == false';
            travis_terminate 0
          fi
        - export $CI_USER_TOKEN
        - |
          export WITH_SWAGGER='false' && yes | cdk deploy "$STACK_NAME" --require-approval never
          if ${updateProduction} ; then
            export WITH_SWAGGER='false' && yes | cdk deploy "$STACK_NAME_P" --profile=prod --require-approval never
          fi
        - OUTPUTS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs" --output json )
        - |
          for s in $(echo $OUTPUTS | ./node_modules/node-jq/bin/jq -r '.[] | "\(.OutputKey)=\(.OutputValue)"'); do
            echo "exporting $s"
            export $s
          done
        - STACK_NAME_P=AlfInstancesStackEuWest1
        - OUTPUTS_P=$(aws cloudformation describe-stacks --stack-name $STACK_NAME_P --region eu-west-1 --query "Stacks[0].Outputs" --output json )
        - |
          for s in $(echo $OUTPUTS_P | ./node_modules/node-jq/bin/jq -r '.[] | "\(.OutputKey)_P=\(.OutputValue)"'); do
            echo "exporting $s"
            export $s
          done
        - aws apigateway create-deployment --rest-api-id $RestApiId --stage-name prod
        - aws apigateway create-deployment --rest-api-id $RestApiId_P --stage-name prod --region eu-west-2 --profile prod
        - sleep 20
        - chmod +x ./createSwagger.sh && ./createSwagger.sh $RestApiId $RestApiId_P
        - npm run build
        - |
          export WITH_SWAGGER='true' && yes | cdk deploy "$STACK_NAME" --require-approval never
          if ${updateProduction} ; then
            export WITH_SWAGGER='true' && yes | cdk deploy "$STACK_NAME_P" --profile=prod --require-approval never
          fi
        - aws apigateway create-deployment --rest-api-id $RestApiId --stage-name prod
        - aws apigateway create-deployment --rest-api-id $RestApiId_P --stage-name prod --region eu-west-2 --profile prod
        - sleep 20
        - "aws dynamodb put-item --table-name $RepoTableName --item '{\"alfType\": {\"N\": \"1\"}, \"Repo\": {\"S\": \"alf-ec2-1\"}, \"instanceType\": {\"S\": \"t2.large\"}}'"
        - "aws dynamodb put-item --table-name $RepoTableName --item '{\"alfType\": {\"N\": \"2\"}, \"Repo\": {\"S\": \"alf-ec2-1\"}, \"instanceType\": {\"S\": \"t2.xlarge\"}}'"
        - "aws dynamodb put-item --table-name $RepoTableName_P --item '{\"alfType\": {\"N\": \"1\"}, \"Repo\": {\"S\": \"alf-ec2-1\"}, \"instanceType\": {\"S\": \"t2.large\"}}' --region eu-west-1"
        - "aws dynamodb put-item --table-name $RepoTableName_P --item '{\"alfType\": {\"N\": \"2\"}, \"Repo\": {\"S\": \"alf-ec2-1\"}, \"instanceType\": {\"S\": \"t2.xlarge\"}}' --region eu-west-1"
        - newman run test/alf-cdk.postman_collection.json --env-var baseUrl=$RestApiEndPoint -r cli,json --reporter-json-export tmp/newman/report.json --export-environment tmp/newman/env-vars.json --export-globals tmp/newman/global-vars.json
        - echo "Postman Resulted Variables Script " && cat tmp/newman/global-vars.json
        # - SERVER=$(./node_modules/node-jq/bin/jq -r '.values[] | select(.key=="url").value' tmp/newman/global-vars.json)
        - echo "Server = $url"
        # - ./node_modules/wait-on/bin/wait-on "http-get://$url" -t 50000 -i 10000 -v
        # - if [ $? == 1 ]; then
        #     echo "Waiting failed -> exit 1"
        #     exit 1
        #   fi
        - aws ec2 terminate-instances --instance-ids $(aws ec2 describe-instances --query 'Reservations[].Instances[].InstanceId' --filters "Name=tag:STACK_NAME,Values=$STACK_NAME" --output text)
        - aws logs get-log-events --log-group-name $LogGroupName --log-stream-name $LogGroupStreamName
    - stage: Destroy Test Stack
      name: Delete stack after test passed
      script:
        - STACKS=AlfInstancesStackEuWest2
        - |
          if ${destroyAfter} ; then
            export WITH_SWAGGER='false' && yes | cdk destroy "$STACKS"
          fi

after_failure:
  # - aws logs get-log-events --log-group-name $LG_NAME --log-stream-name $LG_STREAM_NAME
  # - echo "Postman Resulted Variables Failure" && cat tmp/newman/variables.json
  - cat tmp/newman/report.json
