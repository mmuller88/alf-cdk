openapi: "3.0.1"
info:
  title: "The Alfresco Provisioner"
  description: |
    First of all. Thank you for joining the closed alpha. Your feedback will be much welcomed. The Alfresco Provisioner is a tool to provide seemeless Alfresco Instanzes with man Alfresco products provided for an awesome experience. For more detailed information please look https://martinmueller.dev/alf-provisioner-eng.

    As this is an early version of the Alfresco Provisioner a lot features are not implemented yet. I decided not to bother much with the complexity of authorization and permission yet. I will add those as a layer soon. So for now it is possible to alter resources belonging to an other user than you. Please don't do that if not agreed.

    I plan to send an email when your Alfresco Instanz is ready. But for now you need to check the progress on the GET /items endpoint.

    Currently there is no HTTPS configured with the Proxy in front of each Alfresco instanz provisioned by the Provisioner. So be cautious to not store sensible data!

    As mentioned in the blog post. The provisioned Alfresco is installed with the Alfresco Docker Installer and an Ec2 instance. Following I list the current existing Alf Types:
      * alfType 1: ACS Community Docker Compose X m4.xlarge
      * alfType 2: ACS Community Docker Compose X m4.2xlarge

    Again thank you so much for testing the Alfresco Provisioner.
  version: "2020-04-04T07:24:59Z"
paths:
  /instances:
    get:
      tags:
        - instances
      parameters:
        - $ref: '#/components/parameters/userIdParam'
      x-amazon-apigateway-request-validator: "Validator"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceList'
        401:
          description: Authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        # default:
        #   description: unexpected Error
        #   content:
        #     application/json:
        #       schema:
        #         $ref: '#/components/schemas/Error'
    options:
      tags:
        - instances
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Credentials:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
  /instances/{alfInstanceId}:
    get:
      tags:
        - instances
      parameters:
        - in: path
          name: alfInstanceId
          required: true
          schema:
            $ref: '#/components/schemas/alfInstanceId'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
        400:
          description: Bad request. alfInstanceId is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Item with alfInstanceId doesn't exist or alfInstanceId doesn't belong to userId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /items:
    get:
      tags:
        - items
      parameters:
        - $ref: '#/components/parameters/userIdParam'
      x-amazon-apigateway-request-validator: "Validator"
      responses:
        200:
          description: Ok
        401:
          description: Authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        # default:
        #   description: unexpected Error
        #   content:
        #     application/json:
        #       schema:
        #         $ref: '#/components/schemas/Error'
    post:
      tags:
        - items
      requestBody:
        description: Body for Alf Instance Create
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewInstanceItem"
        required: true
      x-amazon-apigateway-request-validator: "Validator"
      responses:
        201:
          description: Alf instance creation initiated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceItem"
        400:
          description: Bad request. Alf Type be an integer and bigger than 0 and smaller than 1000.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        # default:
        #   description: unexpected Error
        #   content:
        #     application/json:
        #       schema:
        #         $ref: '#/components/schemas/Error'
    options:
      tags:
        - lol
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Credentials:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
  /items/{alfInstanceId}:
    get:
      tags:
        - items
      parameters:
        - in: path
          name: alfInstanceId
          required: true
          schema:
            $ref: '#/components/schemas/alfInstanceId'
        # Required because DynamoDB needs Primary + Sort Key for finding the item
        - in: query
          name: userId
          description: Get all expected alf instances with that userId
          required: true
          schema:
            type: string
      x-amazon-apigateway-request-validator: "Validator"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceItem'
        400:
          description: Bad request. alfInstanceId or userId is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Item with alfInstanceId doesn't exist or alfInstanceId doesn't belong to userId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        # default:
        #   description: unexpected Error
        #   content:
        #     application/json:
        #       schema:
        #         $ref: '#/components/schemas/Error'
    # delete:
    #   parameters:
    #     - in: path
    #       name: alfInstanceId
    #       required: true
    #       schema:
    #         $ref: '#/components/schemas/alfInstanceId'
    #     - in: query
    #       name: userId
    #       description: Get all expected alf instances with that userId
    #       required: true
    #       schema:
    #         type: string
    #     # - $ref: '#/components/parameters/alfInstanceIdParam'
    #   x-amazon-apigateway-request-validator: "Validator"
    #   responses:
    #     204:
    #       description: Ok
    #     400:
    #       description: Bad request. alfInstanceId or userId is invalid
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Error'
    #     401:
    #       description: Authorization information is missing or invalid.
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Error'
    #     404:
    #       description: Item with alfInstanceId doesn't exist or alfInstanceId doesn't belong to userId
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Error'
    #     default:
    #       description: unexpected Error
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Error'
    # options:
    #   parameters:
    #     - in: path
    #       name: alfInstanceId
    #       required: true
    #       schema:
    #         $ref: '#/components/schemas/alfInstanceId'
    #   consumes:
    #   - "application/json"
    #   responses:
    #     200:
    #       description: "200 response"
    #       headers:
    #         Access-Control-Allow-Origin:
    #           type: "string"
    #         Access-Control-Allow-Methods:
    #           type: "string"
    #         Access-Control-Allow-Credentials:
    #           type: "string"
    #         Access-Control-Allow-Headers:
    #           type: "string"
    put:
      tags:
        - items
      parameters:
        - in: path
          name: alfInstanceId
          required: true
          schema:
            $ref: '#/components/schemas/alfInstanceId'
      requestBody:
        description: Body for Alf Instance Update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewInstanceItem"
        required: true
      x-amazon-apigateway-request-validator: "Validator"
      responses:
        201:
          description: Alf instance item updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceItem"
        400:
          description: Bad request. Alf Type be an integer and bigger than 0 and smaller than 1000.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Item with alfInstanceId doesn't exist or alfInstanceId doesn't belong to userId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        # default:
        #   description: unexpected Error
        #   content:
        #     application/json:
        #       schema:
        #         $ref: '#/components/schemas/Error'
components:
  parameters:
    userIdParam:
      in: query
      name: userId
      description: Get all expected alf instances with that userId. Defaults back to your username if you are not an admin!
      required: false
      schema:
        type: string
    alfInstanceIdParam:
      in: path
      name: alfInstanceId
      description: Get alfInstanceId item
      required: true
      schema:
        type: string
  schemas:
    InstanceList:
      type: array
      items:
        $ref: '#/components/schemas/Instance'
    Instance:
      type: object
      required:
        - alfInstanceId
        - status
        - initialPassword
        - url
        - shortLive
      properties:
        alfInstanceId:
          $ref: '#/components/schemas/alfInstanceId'
        status:
          $ref: '#/components/schemas/status'
        initialPassword:
          type: string
        url:
          type: string
        shortLive:
          $ref: '#/components/schemas/shortLived'
    InstanceItemList:
      type: array
      items:
        $ref: '#/components/schemas/InstanceItem'
    InstanceItem:
      allOf:
        - $ref: '#/components/schemas/NewInstanceItem'
        - required:
          - alfInstanceId
          properties:
            alfInstanceId:
              $ref: '#/components/schemas/alfInstanceId'
            lastStatus:
              $ref: '#/components/schemas/lastStatus'
    NewInstanceItem:
      type: object
      required:
        - userId
      properties:
        alfType:
          $ref: '#/components/schemas/alfType'
        expectedStatus:
          $ref: '#/components/schemas/status'
        customName:
          $ref: '#/components/schemas/customName'
        userId:
          $ref: '#/components/schemas/userId'
        shortLived:
          $ref: '#/components/schemas/shortLived'
    Error:
      required:
        # - status
        - message
      properties:
        # code:
        #   type: integer
        #   format: int32
        message:
          type: string
    # AlfInstanceBody:
    #   type: object
    #   required:
    #     - userId
    #   properties:
    #     userId:
    #       $ref: '#/components/schemas/userId'
    #     status:
    #       $ref: '#/components/schemas/status'
    #     alfType:
    #       $ref: '#/components/schemas/alfType'
    #     customName:
    #       $ref: '#/components/schemas/customName'
    #     shortLived:
    #       $ref: '#/components/schemas/shortLived'
    userId:
      type: string
      description: Simple user name
      pattern: "[a-z0-9]{2,64}"
      minLength: 2
      maxLength: 64
    alfInstanceId:
      type: string
      description: User Instance Identifier created with node uuid
    customName:
      type: string
      description: A Name which will be attached as Name Tag to the EC2 Instance
      default: No Name
    lastStatus:
      type: object
      required:
        - lastUpdate
        - status
      properties:
        lastUpdate:
          type: string
          format: date
        status:
          $ref: '#/components/schemas/status'
    # expectedStatus:
    status:
      type: string
      enum:
        - running
        - terminated
        - stopped
      default: running
    alfType:
      type: integer
      format: int32
      description: Type of the backend. Combination from EC2 Instance Type and Alfresco Deployment
      minimum: 1
      maximum: 999
      default: 1
    shortLived:
      type: boolean
      description: If true it will terminate after 55 min. Otherwise it will live for 3 days.
      default: true
x-amazon-apigateway-request-validators:
  Validator:
    validateRequestParameters: true
    validateRequestBody: true
