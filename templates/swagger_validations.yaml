openapi: "3.0.1"
info:
  title: "The Alfresco Provisioner"
  description: |
    First of all. Thank you for joining the closed alpha. Your feedback will be much welcomed. The Alfresco Provisioner is a managed service to provide Alfresco backends with an awesome experience. For more details please look https://martinmueller.dev/alf-provisioner-eng.

    As the Alfresco Provisioner is a managed service to provide Alfresco backends it would be very great if you could get a roughly overview about what the Alfresco products are for. In my blog post mentioned above I give you a rough overview about the Alfresco products in the Closed Alpha section.

    Notice:
    As this is an early version of the Alfresco Provisioner a lot features are not implemented yet.

    I decided not to bother much with the complexity of authorization and permission yet. I will add those as a layer. So for now it is possible to alter resources belonging to an other user than you. Please don't do that if not agreed and only use your username for instance creation. Anyway the endpoints themself are indeed secured with oauth2 and an implicit grant which is put in the Authorization header. SO USING THE AUTHORIZE POPUP IN THE UI ISN'T NECESSARY

    For cost saving reasons per default the EC2 instance will stop themself after 45 minutes after creation or update. You can start the instance again with using the PUT endpoint.
    As well you are only allowed to create a maximum of 2 instances per user. Please terminate not used instances. Instruction how to terminate an instance you can find in the delete endpoint.

    I set a maximum of 50 parallel running ec2 instances. If that limit is reached you can not create new Alfresco Instanzes. I hope not but it might be necesarray that I stop or delete instances to save money.

    How to start?:
    Simply explore the provided endpoints in the next section. The endpoints in the tag group named instances are showing your / all existent Alfresco Instanzes. The group tag named instances-conf helps to request alfresco instances. For the beginning you could use the POST Endpoint to request the creation of an Alfresco instanz. Than check your request with the GET endpoints in the instance-conf tag group. If your instance request was granted you will find your instanz in the instances tag group. Please regard that the alfresco url will be available after 3 minutes as it takes a bit for ACS to boot successfully. After that /share /alfresco and ACA / will be reachable on the url similar looking to http://ec2-18-130-20-156.eu-west-2.compute.amazonaws.com/ .

    Implemented features:
      * Spinning up an Alfresco Docker Compose Backend on Ec2 with using the endpoints
      * Accessing ACA, Share and Alfresco Urls (more details look for the url property definition below)
      * Start, Stopping and Terminating of Alfresco instances
      * Info property about status of the Alfresco Booting Progress

    Planned features in near future:
      * Adding an Auto Scaling in front of the ec2 image for autoself healing and a health check if ACS is ready
      * SSL encryption. Currently there is no HTTPS configured with the Proxy in front of each Alfresco instanz provisioned by the Provisioner. So be cautious to not store sensible data!
      * Email notification. I plan to send an email when your Alfresco Instanz is ready. But for now you need to check the progress on the GET /instances-conf endpoint and the info property.

    Planned features in more distance future:
      * Stopping instances after inactivity for saving costs

    Again thank you so much for testing the Alfresco Provisioner. Any feedback is much welcomed! Please let me know on damadden88@googlemail.com .
  version: "2020-04-04T07:24:59Z"
paths:
  /instances:
    get:
      tags:
        - instances
      operationId: getInstances
      parameters:
        - $ref: '#/components/parameters/userIdParam'
      x-amazon-apigateway-request-validator: "Validator"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceList'
        401:
          description: Authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        # default:
        #   description: unexpected Error
        #   content:
        #     application/json:
        #       schema:
        #         $ref: '#/components/schemas/Error'
    options:
      tags:
        - instances
      operationId: optionsInstances
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Credentials:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
  /instances/{alfInstanceId}:
    get:
      tags:
        - instances
      operationId: getInstance
      parameters:
        - in: path
          name: alfInstanceId
          required: true
          schema:
            $ref: '#/components/schemas/alfInstanceId'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
        400:
          description: Bad request. alfInstanceId is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Conf with alfInstanceId doesn't exist or alfInstanceId doesn't belong to userId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /instances-conf:
    get:
      tags:
        - instances-conf
      operationId: getInstanceConfs
      parameters:
        - $ref: '#/components/parameters/userIdParam'
      x-amazon-apigateway-request-validator: "Validator"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceConfList'
        401:
          description: Authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        # default:
        #   description: unexpected Error
        #   content:
        #     application/json:
        #       schema:
        #         $ref: '#/components/schemas/Error'
    post:
      tags:
        - instances-conf
      operationId: addInstanceConf
      requestBody:
        description: Body for Alf Instance Create
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewInstanceConf"
        required: true
      x-amazon-apigateway-request-validator: "Validator"
      responses:
        201:
          description: Alf instance creation initiated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceConf"
        400:
          description: Bad request. Alf Type be an integer and bigger than 0 and smaller than 1000.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        # default:
        #   description: unexpected Error
        #   content:
        #     application/json:
        #       schema:
        #         $ref: '#/components/schemas/Error'
    options:
      tags:
        - instances-conf
      operationId: optionInstanceConf
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Credentials:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
  /instances-conf/{alfInstanceId}:
    get:
      tags:
        - instances-conf
      operationId: getInstanceConf
      parameters:
        - in: path
          name: alfInstanceId
          required: true
          schema:
            $ref: '#/components/schemas/alfInstanceId'
        # Required because DynamoDB needs Primary + Sort Key for finding the Conf
        - in: query
          name: userId
          description: Get all expected alf instances with that userId
          required: true
          schema:
            type: string
      x-amazon-apigateway-request-validator: "Validator"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceConf'
        400:
          description: Bad request. alfInstanceId or userId is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Conf with alfInstanceId doesn't exist or alfInstanceId doesn't belong to userId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        # default:
        #   description: unexpected Error
        #   content:
        #     application/json:
        #       schema:
        #         $ref: '#/components/schemas/Error'
    # delete:
    #   parameters:
    #     - in: path
    #       name: alfInstanceId
    #       required: true
    #       schema:
    #         $ref: '#/components/schemas/alfInstanceId'
    #     - in: query
    #       name: userId
    #       description: Get all expected alf instances with that userId
    #       required: true
    #       schema:
    #         type: string
    #     # - $ref: '#/components/parameters/alfInstanceIdParam'
    #   x-amazon-apigateway-request-validator: "Validator"
    #   responses:
    #     204:
    #       description: Ok
    #     400:
    #       description: Bad request. alfInstanceId or userId is invalid
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ValidationError'
    #     401:
    #       description: Authorization information is missing or invalid.
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Error'
    #     404:
    #       description: Conf with alfInstanceId doesn't exist or alfInstanceId doesn't belong to userId
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Error'
    #     default:
    #       description: unexpected Error
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Error'
    # options:
    #   parameters:
    #     - in: path
    #       name: alfInstanceId
    #       required: true
    #       schema:
    #         $ref: '#/components/schemas/alfInstanceId'
    #   consumes:
    #   - "application/json"
    #   responses:
    #     200:
    #       description: "200 response"
    #       headers:
    #         Access-Control-Allow-Origin:
    #           type: "string"
    #         Access-Control-Allow-Methods:
    #           type: "string"
    #         Access-Control-Allow-Credentials:
    #           type: "string"
    #         Access-Control-Allow-Headers:
    #           type: "string"
    put:
      tags:
        - instances-conf
      operationId: updateInstanceConf
      description: Requests attribute instance changes.
      parameters:
        - in: path
          name: alfInstanceId
          required: true
          schema:
            $ref: '#/components/schemas/alfInstanceId'
      requestBody:
        description: Body for Alf Instance Update. Currently only the update of the status is supported!
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutInstanceConf"
        required: true
      x-amazon-apigateway-request-validator: "Validator"
      responses:
        201:
          description: Alf instance Conf updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceConf"
        400:
          description: Bad request. Alf Type be an integer and bigger than 0 and smaller than 1000.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Conf with alfInstanceId doesn't exist or alfInstanceId doesn't belong to userId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        # default:
        #   description: unexpected Error
        #   content:
        #     application/json:
        #       schema:
        #         $ref: '#/components/schemas/Error'
components:
  parameters:
    userIdParam:
      in: query
      name: userId
      description: Get all expected alf instances with that userId. Please use you user name from the system.
      required: false
      schema:
        type: string
    alfInstanceIdParam:
      in: path
      name: alfInstanceId
      description: Get alfInstanceId Conf
      required: true
      schema:
        type: string
  schemas:
    InstanceList:
      additionalProperties: false
      type: array
      items:
        $ref: '#/components/schemas/Instance'
    Instance:
      additionalProperties: false
      type: object
      required:
        - alfInstanceId
        - status
        - initialPassword
        - url
        - shortLive
      properties:
        alfInstanceId:
          $ref: '#/components/schemas/alfInstanceId'
        status:
          $ref: '#/components/schemas/status'
        initialPassword:
          type: string
        # info:
        #   type: string
        #   description: Specific information about the ACS Deployment
        url:
          type: string
          description: |
            The Url to access ACA. Currently only http is supported. Urls are ACA = ../ Share = ../share Alfresco = ../alfresco . It takes up to 3 minutes until this url becomes available. In future I plan to implement a healthcheck (probably leveraging AWS AutoScaling) to make the readiness of ACS more feaseble.
        # shortLived:
        #   $ref: '#/components/schemas/shortLived'
    InstanceConfList:
      type: array
      items:
        $ref: '#/components/schemas/InstanceConf'
    InstanceConf:
      additionalProperties: false
      allOf:
        - $ref: '#/components/schemas/NewInstanceConf'
        - required:
          - alfInstanceId
          properties:
            alfInstanceId:
              $ref: '#/components/schemas/alfInstanceId'
            lastStatus:
              $ref: '#/components/schemas/lastStatus'
    NewInstanceConf:
      additionalProperties: false
      type: object
      required:
        - userId
      properties:
        alfType:
          $ref: '#/components/schemas/alfType'
        expectedStatus:
          $ref: '#/components/schemas/status'
        customName:
          $ref: '#/components/schemas/customName'
        userId:
          $ref: '#/components/schemas/userId'
        # shortLived:
        #   $ref: '#/components/schemas/shortLived'
    PutInstanceConf:
      additionalProperties: false
      type: object
      required:
        - userId
      properties:
        expectedStatus:
          $ref: '#/components/schemas/status'
        userId:
          $ref: '#/components/schemas/userId'
    Error:
      required:
        - message
      properties:
        message:
          type: string
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - required:
          - validationErrors
          properties:
            validationErrors:
              type: string
    userId:
      additionalProperties: false
      default: alfresco
      type: string
      description: Simple user name. Please use your user name from the system.
      pattern: "[a-z0-9]{2,64}"
      minLength: 2
      maxLength: 64
    alfInstanceId:
      additionalProperties: false
      type: string
      description: User Instance Identifier created with node uuid
    customName:
      additionalProperties: false
      type: string
      description: A Name which will be attached as Name Tag to the EC2 Instance
      default: No Name
    lastStatus:
      additionalProperties: false
      type: object
      description: Information about when the status was successfully changed last time
      required:
        - lastUpdate
        - status
      properties:
        lastUpdate:
          type: string
          format: date
        status:
          $ref: '#/components/schemas/status'
    # expectedStatus:
    status:
      additionalProperties: false
      type: string
      description: Warning putting instances into terminated will delete the instance-conf and instance!
      enum:
        - running
        - terminated
        - stopped
      default: running
    alfType:
      additionalProperties: false
      type: object
      required:
        - ec2InstanceType
        - gitRepo
      properties:
        ec2InstanceType:
          type: string
          description: |
            Supported Ec2 Instance Type. Supported are:
            t2.large - 2 CPU, 8 GB RAM
            t2.xlarge - 4 CPU, 16 GB RAM
          enum:
            - t2.large
            - t2.xlarge
          default: t2.large
        gitRepo:
          type: string
          description: |
            Name of supported Alfresco Docker Compose Deployment deployed with the Alfresco installer.
            alf-ec-1 : ACS 6.2 Community, ACA
          enum:
            - alf-ec2-1
          default: alf-ec2-1
    # shortLived:
    #   additionalProperties: false
    #   type: boolean
    #   description: If true it will terminate after 55 min. Otherwise it will live for 3 days.
    #   default: true
x-amazon-apigateway-request-validators:
  Validator:
    validateRequestParameters: true
    validateRequestBody: true
