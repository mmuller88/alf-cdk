---
parameters:
  alfUserIdParam:
    in: query
    name: alfUserId
    description: Get all expected alf instances with that alfUserId
    required: false
    type: string
  alfInstanceIdParam:
    in: path
    name: alfInstanceId
    description: Get alfInstanceId item
    required: true
    type: string
paths:
  /instances:
    get:
      parameters:
        - $ref: '#/parameters/alfUserIdParam'
      x-amazon-apigateway-request-validator: "Validator"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceList'
        401:
          description: Authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /items:
    get:
      parameters:
        - $ref: '#/parameters/alfUserIdParam'
      x-amazon-apigateway-request-validator: "Validator"
      responses:
        200:
          description: Ok
        401:
          description: Authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      requestBody:
        description: Body for Alf Instance Create
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewInstanceItem"
        required: true
      x-amazon-apigateway-request-validator: "Validator"
      responses:
        201:
          description: Alf instance creation initiated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceItem"
        400:
          description: Bad request. Alf Type be an integer and bigger than 0 and smaller than 1000.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    # options:
    #   consumes:
    #   - "application/json"
    #   responses:
    #     200:
    #       description: "200 response"
    #       headers:
    #         Access-Control-Allow-Origin:
    #           type: "string"
    #         Access-Control-Allow-Methods:
    #           type: "string"
    #         Access-Control-Allow-Credentials:
    #           type: "string"
    #         Access-Control-Allow-Headers:
    #           type: "string"
  /items/{alfInstanceId}:
    get:
      parameters:
        - in: path
          name: alfInstanceId
          required: true
          schema:
            $ref: '#/components/schemas/alfInstanceId'
        # Required because DynamoDB needs Primary + Sort Key for finding the item
        - in: query
          name: alfUserId
          description: Get all expected alf instances with that alfUserId
          required: true
          type: string
        - $ref: '#/parameters/alfInstanceIdParam'
      x-amazon-apigateway-request-validator: "Validator"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceItem'
        400:
          description: Bad request. alfInstanceId or alfUserId is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Item with alfInstanceId doesn't exist or alfInstanceId doesn't belong to alfUserId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      parameters:
        - in: path
          name: alfInstanceId
          required: true
          schema:
            $ref: '#/components/schemas/alfInstanceId'
        - in: query
          name: alfUserId
          description: Get all expected alf instances with that alfUserId
          required: true
          type: string
        - $ref: '#/parameters/alfInstanceIdParam'
      x-amazon-apigateway-request-validator: "Validator"
      responses:
        204:
          description: Ok
        400:
          description: Bad request. alfInstanceId or alfUserId is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Item with alfInstanceId doesn't exist or alfInstanceId doesn't belong to alfUserId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    # options:
    #   parameters:
    #     - in: path
    #       name: alfInstanceId
    #       required: true
    #       schema:
    #         $ref: '#/components/schemas/alfInstanceId'
    #   consumes:
    #   - "application/json"
    #   responses:
    #     200:
    #       description: "200 response"
    #       headers:
    #         Access-Control-Allow-Origin:
    #           type: "string"
    #         Access-Control-Allow-Methods:
    #           type: "string"
    #         Access-Control-Allow-Credentials:
    #           type: "string"
    #         Access-Control-Allow-Headers:
    #           type: "string"
    put:
      parameters:
        - in: path
          name: alfInstanceId
          required: true
          schema:
            $ref: '#/components/schemas/alfInstanceId'
      requestBody:
        description: Body for Alf Instance Update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewInstanceItem"
        required: true
      x-amazon-apigateway-request-validator: "Validator"
      responses:
        201:
          description: Alf instance item updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceItem"
        400:
          description: Bad request. Alf Type be an integer and bigger than 0 and smaller than 1000.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Item with alfInstanceId doesn't exist or alfInstanceId doesn't belong to alfUserId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    InstanceList:
      type: array
      items:
        $ref: '#/components/schemas/Instance'
    Instance:
      type: object
      required:
        - alfInstanceId
        - status
        - initialPassword
        - url
        - shortLive
      properties:
        alfInstanceId:
          $ref: '#/components/schemas/alfInstanceId'
        status:
          $ref: '#/components/schemas/expectedStatus'
        initialPassword:
          type: string
        url:
          type: string
        shortLive:
          $ref: '#/components/schemas/shortLived'
    InstanceItemList:
      type: array
      items:
        $ref: '#/components/schemas/InstanceItem'
    InstanceItem:
      allOf:
        - $ref: '#/components/schemas/NewInstanceItem'
        - required:
          - alfInstanceId
          properties:
            alfInstanceId:
              $ref: '#/components/schemas/alfInstanceId'
    NewInstanceItem:
      type: object
      required:
        - alfUserId
      properties:
        alfType:
          $ref: '#/components/schemas/alfType'
        expectedStatus:
          $ref: '#/components/schemas/expectedStatus'
        customName:
          $ref: '#/components/schemas/customName'
        alfUserId:
          $ref: '#/components/schemas/alfUserId'
        shortLived:
          $ref: '#/components/schemas/shortLived'
    Error:
      required:
        - status
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    # AlfInstanceBody:
    #   type: object
    #   required:
    #     - alfUserId
    #   properties:
    #     alfUserId:
    #       $ref: '#/components/schemas/alfUserId'
    #     expectedStatus:
    #       $ref: '#/components/schemas/expectedStatus'
    #     alfType:
    #       $ref: '#/components/schemas/alfType'
    #     customName:
    #       $ref: '#/components/schemas/customName'
    #     shortLived:
    #       $ref: '#/components/schemas/shortLived'
    alfUserId:
      type: string
      description: Simple user name
      pattern: "[a-z0-9]{2,64}"
      minLength: 2
      maxLength: 64
    alfInstanceId:
      type: string
      description: User Instance Identifier created with node uuid
    customName:
      type: string
      description: A Name which will be attached as Name Tag to the EC2 Instance
      default: No Name
    expectedStatus:
      type: string
      enum:
        - running
        - hibernate
        - terminated
        - stopped
      default: running
    alfType:
      type: integer
      format: int32
      description: Type of the backend. Combination from EC2 Instance Type and Alfresco Deployment
      minimum: 1
      maximum: 999
      default: 1
    shortLived:
      type: boolean
      description: If true it will terminate after 55 min. Otherwise it will live for 3 days.
      default: true
x-amazon-apigateway-request-validators:
  Validator:
    validateRequestParameters: true
    validateRequestBody: true
